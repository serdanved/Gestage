<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Internship extends MY_Controller {
	function __construct() {
		parent::__construct();
		$this->load->model('Internship_model');
		$this->load->model('Teacher_model');
		$this->load->model('Student_model');
		$this->load->model('Program_model');
		$this->load->model('Block_model');
		$this->load->model('Absence_model');
		$this->load->model('Message_model');
		$this->load->model('Document_model');
		$this->load->model('Note_model');
		$this->load->model('Obligation_model');
	}

	/*
	 * Listing of internships
	 */
	function index() {
		//CHECK IF WE HAVE AN USER ID
		if ($this->session->userdata('userid')) {
			$user_id = $this->session->userdata('userid');

			//CREATE CURRENT PAGINATION

			//$user_id = 68;

			switch (get_current_user_status()) {
				//LOAD INTERNSHIPS FOR USER_ROLE "ADMIN"
				case "admin":
					$data['internships'] = $this->Internship_model->get_all_internships("admin", $user_id);
					break;

				//LOAD INTERNSHIPS FOR USER_ROLE "TEACHER" A
				case "teacher":
					$current_user_program_id = $this->Teacher_model->get_teacher($user_id);
					$data['internships'] = $this->Internship_model->get_all_internships("teacher", $user_id, $current_user_program_id['PROGRAM_IDS']);

					//die("<pre>" . $this->db->last_query() . "</pre>");
					break;

				//LOAD INTERNSHIPS FOR USER_ROLE "STUDENT"
				case "student":
					$data['internships'] = $this->Internship_model->get_all_internships("student", $user_id);
					break;

				//LOAD INTERNSHIPS FOR USER_ROLE "EMPLOYER"
				case "employer":
					$data['internships'] = $this->Internship_model->get_all_internships("employer", $user_id);
					//echo $this->db->last_query();
					break;

				//IF WE CAN'T FIND GROUP RETURN ERROR
				default:
					die("Impossible d'obtenir votre status d'utilisateur.");
			}
		} //DIE IF NO USER ID
		else {
			die("Impossible d'obtenir votre identifiant d'utilisateur");
		}

		$data['_view'] = 'internship/index';
		$this->load->view('layouts/main', $data);
	}

	/*
	 * Adding a new internship
	 */
	function add() {
		$this->load->model('Student_model');
		$this->load->model('Teacher_model');
		$this->load->model('Program_model');
		$this->load->model('Employer_model');
        $this->load->model('Pdf_model');

		if (isset($_POST) && count($_POST) > 0) {
			$this->form_validation->set_rules('STUDENT_ID[]', 'ÉlÈVE', 'required');
			$this->form_validation->set_rules('TEACHER_ID', 'ENSEIGNANT', 'required');
			$this->form_validation->set_rules('PROGRAM_ID', 'PROGRAMME', 'required');
			$this->form_validation->set_rules('EMPLOYER_ID', 'EMPLOYEUR', 'required');
			$this->form_validation->set_rules('EMPLOYER_CONTACT_ID', 'CONTACT', 'required');
			$this->form_validation->set_rules('BLOCK_NAME', 'NOM BLOC', 'required');
			$this->form_validation->set_rules('TOTAL_HOURS', 'HEURES TOTAL', 'numeric|required');
			$this->form_validation->set_rules('DATE_START', 'DATE DE DÉBUT', 'required');
			$this->form_validation->set_rules('DATE_END', 'DATE DE FIN', 'required');

			if ($this->form_validation->run() == true) {
				foreach ($_POST["STUDENT_ID"] as $student_id) {
					//ADD ENTRY IN INTERNSHIPS
					$params = array(
						'STUDENT_ID' => $student_id,
						'PROGRAM_ID' => $this->input->post('PROGRAM_ID'),
						'EMPLOYER_ID' => $this->input->post('EMPLOYER_ID'),
						'EMPLOYER_CONTACT_ID' => $this->input->post('EMPLOYER_CONTACT_ID'),
						'DATE_START' => $this->input->post('DATE_START'),
						'DATE_END' => $this->input->post('DATE_END'),
						'SCHEDULE' => '[{"DAY":"LUNDI","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","TOTAL":""},{"DAY":"MARDI","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","TOTAL":""},{"DAY":"MERCREDI","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","TOTAL":""},{"DAY":"JEUDI","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","TOTAL":""},{"DAY":"VENDREDI","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","TOTAL":""},{"DAY":"SAMEDI","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","CLOSED":"off","TOTAL":""},{"DAY":"DIMANCHE","FROM_AM":"8:00","TO_AM":"12:00","FROM_PM":"13:00","TO_PM":"16:00","CLOSED":"on","TOTAL":""}]',
					);

					$internship_id = $this->Internship_model->add_internship($params);

                    $path = __DIR__ . '/../../resources/documents/';
                    if (!file_exists($path . $internship_id)) {
                        mkdir($path . $internship_id, 0777, true);
                    }

                    $addedIds = $this->Pdf_model->add_default_pdf_to_stage($internship_id);
                    foreach ($addedIds as $D) {
                        copy($path . $D["default"] . ".pdf", $path . $internship_id . "/" . $D["new"] . ".pdf");
                    }

					// ADD ENTRY IN BLOCKS
					$params = array(
						'NAME' => $this->input->post('BLOCK_NAME'),
						'DATE_START' => $this->input->post('DATE_START'),
						'DATE_END' => $this->input->post('DATE_END'),
						'TOTAL_HOURS' => $this->input->post('TOTAL_HOURS'),
						'INTERNSHIP_ID' => $internship_id,
						'TEACHER_ID' => $this->input->post('TEACHER_ID'),
						'CURRENT' => 1,
					);

					$block_id = $this->Block_model->add_block($params);
				} //end foreach student

				redirect("internship/index");
			} else if ($this->form_validation->run() == false) {
				/* Si le user est un professeur, on ne lui donne pas toutes les infos */
				if ($this->session->status == 'teacher') {
					$data['all_students'] = $this->Student_model->get_all_students_by_teacher_id($this->session->userid);
					$data['all_teachers'] = $this->Teacher_model->get_program_teachers($this->session->userid);
					$data['all_programs'] = $this->Teacher_model->get_program_by_teacher_id_select($this->session->userid);
				} else if ($this->session->status == 'admin') {
					$data['all_students'] = $this->Student_model->get_all_students();
					$data['all_teachers'] = $this->Teacher_model->get_all_teachers();
					$data['all_programs'] = $this->Program_model->get_all_programs();
				}

				$data['_view'] = 'internship/add';
				$this->load->view('layouts/main', $data);
			}
		} else {
			/* Si le user est un professeur, on ne lui donne pas toutes les infos */
			if ($this->session->status == 'teacher') {
				$data['all_programs'] = $this->Teacher_model->get_program_by_teacher_id_select($this->session->userid);
				$data['all_teachers'] = $this->Teacher_model->get_program_teachers($this->session->userid);

				if ($this->session->is_ate == 0) {
					$data['all_students'] = $this->Student_model->get_all_students_by_teacher_id($this->session->userid);
				} else {
					$data['all_students'] = [];
					foreach ($data['all_programs'] as $p) {
						$data['all_students'] = array_merge($data['all_students'], $this->Student_model->get_all_students_from_program_ids($p["ID"]));
					}
				}
			} else if ($this->session->status == 'admin') {
				$data['all_students'] = $this->Student_model->get_all_students();
				$data['all_teachers'] = $this->Teacher_model->get_all_teachers();
				$data['all_programs'] = $this->Program_model->get_all_programs();
			}

			$data['_view'] = 'internship/add';
			$this->load->view('layouts/main', $data);
		}
	}

	/* Deleting an internship block */
	function removeblock($ID) {
		$this->load->model('Block_model');
		$block = $this->Block_model->get_block($ID);
		$this->Block_model->delete_block($ID);
		redirect('internship/edit/' . $block["INTERNSHIP_ID"]);
	}

	function deletemessage() {
		if ($this->input->post('messageid')) {
			$this->load->model('Message_model');
			$messageid = $this->input->post('messageid');
			$this->Message_model->delete_message($messageid);
			echo "true";
		}
	}

	function generate_schedule() {
		if (($this->input->post("block_id")) && ($this->input->post("internship_id"))) {
			$block_id = $this->input->post("block_id");
			$internship_id = $this->input->post("internship_id");

			//GET INTERNSHIP SCHEDULE DATA
			$internship_schedules_json = $this->Internship_model->get_internship($internship_id)["SCHEDULE"];
			$internship_schedules = json_decode($internship_schedules_json);

			//GENERATE DATES DATA ENTRY
			$block = $this->Block_model->get_block($block_id);
			$date_end = new DateTime($block["DATE_END"]);
			$date_end = $date_end->modify('+1 day');
			$period = new DatePeriod(
				new DateTime($block["DATE_START"]),
				new DateInterval('P1D'),
				$date_end
			);

			foreach ($period as $key => $value) {
				$day_number = $value->format('N');
				$day_date = $value->format('Y-m-d');
				$compare_with = 0;
				switch ($day_number) {
					case "1":
						$compare_with = 0;
						break;
					case "2":
						$compare_with = 1;
						break;
					case "3":
						$compare_with = 2;
						break;
					case "4":
						$compare_with = 3;
						break;
					case "5":
						$compare_with = 4;
						break;
					case "6":
						$compare_with = 5;
						break;
					case "7":
						$compare_with = 6;
						break;
				}
				$internship_schedules[$compare_with]->DATE = $day_date;
				$internship_schedules[$compare_with]->TOTAL = 0;
				$internship_schedules[$compare_with]->PRESENT = "on";
				$internship_schedules[$compare_with]->REASON = "";

				if (!isset($internship_schedules[$compare_with]->CLOSED)) {
					$datetime_from_am = new DateTime($internship_schedules[$compare_with]->FROM_AM);
					$datetime_to_am = new DateTime($internship_schedules[$compare_with]->TO_AM);
					$datetime_am = $this->time_to_decimal($datetime_from_am->diff($datetime_to_am)->format('%H:%I'));

					$datetime_from_pm = new DateTime($internship_schedules[$compare_with]->FROM_PM);
					$datetime_to_pm = new DateTime($internship_schedules[$compare_with]->TO_PM);
					$datetime_pm = $this->time_to_decimal($datetime_from_pm->diff($datetime_to_pm)->format('%H:%I'));

					if ((isset($internship_schedules[$compare_with]->FROM_EV)) && (isset($internship_schedules[$compare_with]->TO_EV))) {
						$datetime_from_ev = new DateTime($internship_schedules[$compare_with]->FROM_EV);
						$datetime_to_ev = new DateTime($internship_schedules[$compare_with]->TO_EV);
						$datetime_ev = $this->time_to_decimal($datetime_from_ev->diff($datetime_to_ev)->format('%H:%I'));
					} else {
						$datetime_ev = 0;
					}

					$total = ($datetime_am + $datetime_pm + $datetime_ev) / 60;
					$internship_schedules[$compare_with]->TOTAL = $total;
				}

				//INSERT
				$params = array(
					'BLOCK_ID' => $block_id,
					'INTERNSHIP_ID' => $internship_id,
					'VALUE' => json_encode($internship_schedules[$compare_with]),
				);

				$this->Block_model->add_block_schedule($params);
			}

			echo "GENERATE";
		}
	}

	function time_to_decimal($time) {
		$timeArr = explode(':', $time);
		$decTime = ($timeArr[0] * 60) + ($timeArr[1]);

		return $decTime;
	}

	function update_presence() {
        $input_data = json_decode(trim(file_get_contents('php://input')), true);
        $ok = false;

        foreach ($input_data as $data) {
            $schedule_id = $data["schedule_id"];
			$schedule_reason = $data["schedule_reason"];
			$presence = $data["data"];

			if ((!isset($presence["CLOSED"])) && (isset($presence["PRESENT"]))) {
				$datetime_from_am = new DateTime($presence["FROM_AM"]);
				$datetime_to_am = new DateTime($presence["TO_AM"]);
				$datetime_am = $this->time_to_decimal($datetime_from_am->diff($datetime_to_am)->format('%H:%I'));

				$datetime_from_pm = new DateTime($presence["FROM_PM"]);
				$datetime_to_pm = new DateTime($presence["TO_PM"]);
				$datetime_pm = $this->time_to_decimal($datetime_from_pm->diff($datetime_to_pm)->format('%H:%I'));

				$datetime_from_ev = new DateTime($presence["FROM_EV"]);
				$datetime_to_ev = new DateTime($presence["TO_EV"]);
				$datetime_ev = $this->time_to_decimal($datetime_from_ev->diff($datetime_to_ev)->format('%H:%I'));

				$total = ($datetime_am + $datetime_pm + $datetime_ev) / 60;
				$presence["TOTAL"] = $total;
				$presence["REASON"] = $schedule_reason;
			} else {
				$presence["TOTAL"] = 0;
				$presence["REASON"] = $schedule_reason;
				$presence["REASON_BY_ID"] = $this->session->userdata('userid');
				$presence["REASON_BY_TYPE"] = $this->session->userdata('status_id');
				$presence["REASON_REPORT_DATE"] = date('Y-m-d h:i:s');
			}

			//UPDATE
			$data['block_schedule'] = $this->Block_model->get_block_schedule($schedule_id);
			if (isset($data['block_schedule']['ID'])) {
				$params = array('VALUE' => json_encode($presence));
				$this->Block_model->update_block_schedules($schedule_id, $params);
				$ok = true;
			} else {
                $ok = false;
            }
        }

        if ($ok == true) {
            echo "UPDATE";
        }
		/*if (($this->input->post("schedule_id")) && ($this->input->post("json_str"))) {
			$schedule_id = $this->input->post("schedule_id");
			$schedule_reason = $this->input->post("schedule_reason");
			$json_str = $this->input->post("json_str");

			$presence = json_decode($json_str);

			if ((!isset($presence->CLOSED)) && (isset($presence->PRESENT))) {
				$datetime_from_am = new DateTime($presence->FROM_AM);
				$datetime_to_am = new DateTime($presence->TO_AM);
				$datetime_am = $this->time_to_decimal($datetime_from_am->diff($datetime_to_am)->format('%H:%I'));

				$datetime_from_pm = new DateTime($presence->FROM_PM);
				$datetime_to_pm = new DateTime($presence->TO_PM);
				$datetime_pm = $this->time_to_decimal($datetime_from_pm->diff($datetime_to_pm)->format('%H:%I'));

				$datetime_from_ev = new DateTime($presence->FROM_EV);
				$datetime_to_ev = new DateTime($presence->TO_EV);
				$datetime_ev = $this->time_to_decimal($datetime_from_ev->diff($datetime_to_ev)->format('%H:%I'));

				$total = ($datetime_am + $datetime_pm + $datetime_ev) / 60;
				$presence->TOTAL = $total;
				$presence->REASON = $schedule_reason;
			} else {
				$presence->TOTAL = 0;
				$presence->REASON = $schedule_reason;
				$presence->REASON_BY_ID = $this->session->userdata('userid');
				$presence->REASON_BY_TYPE = $this->session->userdata('status_id');
				$presence->REASON_REPORT_DATE = date('Y-m-d h:i:s');
			}

			//UPDATE
			$data['block_schedule'] = $this->Block_model->get_block_schedule($schedule_id);
			if (isset($data['block_schedule']['ID'])) {
				$params = array('VALUE' => json_encode($presence));
				$this->Block_model->update_block_schedules($schedule_id, $params);
				echo "UPDATE";
			};
		}*/
	}

	function update_schedule() {
		if (($this->input->post("horaire_stage")) && ($this->input->post("internship_id"))) {
			$horaire_stage = $this->input->post("horaire_stage");

			$internship_id = $this->input->post("internship_id");
			$horaire_stage_json = json_decode($horaire_stage);

			if ($horaire_stage_json !== null) {
				foreach ($horaire_stage_json as &$horaire_stage_week) {
					if (!isset($horaire_stage_week->CLOSED)) {
						$datetime_from_am = new DateTime($horaire_stage_week->FROM_AM);
						$datetime_to_am = new DateTime($horaire_stage_week->TO_AM);
						$datetime_am = $this->time_to_decimal($datetime_from_am->diff($datetime_to_am)->format('%H:%I'));

						$datetime_from_pm = new DateTime($horaire_stage_week->FROM_PM);
						$datetime_to_pm = new DateTime($horaire_stage_week->TO_PM);
						$datetime_pm = $this->time_to_decimal($datetime_from_pm->diff($datetime_to_pm)->format('%H:%I'));

						if ($this->input->post("evening") == 1) {
							$datetime_from_ev = new DateTime($horaire_stage_week->FROM_EV);
							$datetime_to_ev = new DateTime($horaire_stage_week->TO_EV);
							$datetime_ev = $this->time_to_decimal($datetime_from_ev->diff($datetime_to_ev)->format('%H:%I'));
						} else {
							$datetime_ev = 0;
						}

						$total = ($datetime_am + $datetime_pm + $datetime_ev) / 60;
						$horaire_stage_week->TOTAL = $total;
					} else {
						$horaire_stage_week->TOTAL = 0;
					}
				}

				$horaire_stage = json_encode($horaire_stage_json);

				$data['internship'] = $this->Internship_model->get_internship($internship_id);
				if (isset($data['internship']['ID'])) {
					$params = array(
						'SCHEDULE' => $horaire_stage,
					);

					$this->Internship_model->update_internship($internship_id, $params);
					echo "UPDATE";
				} else {
					echo "STAGE INVALIDE";
				}
			} else {
				echo "JSON INVALIDE";
			}
		}
	}

	/*
	 * Editing a internship
	 */
	function edit($ID) {
		// check if the internship exists before trying to edit it
		$data['internship'] = $this->Internship_model->get_internship($ID);

		if (isset($data['internship']['ID'])) {
			$this->load->model('Employer_model');
			$data['employer'] = $this->Employer_model->get_employer($data['internship']["EMPLOYER_ID"]);
			$data['employer_contact'] = $this->Employer_model->get_employer_contact($data['internship']["EMPLOYER_CONTACT_ID"]);

			$this->load->model('Student_model');
			$data['all_students'] = $this->Student_model->get_all_students();

			$this->load->model('Teacher_model');
			$data['all_teachers'] = $this->Teacher_model->get_all_teachers();
			$data['program_teachers'] = $this->Teacher_model->get_program_teachers($data['internship']['PROGRAM_ID']);

			$this->load->model('Program_model');
			$data['all_programs'] = $this->Program_model->get_all_programs();

			$this->load->model('Obligation_model');
			$params = array("INTERNSHIP_ID" => $ID);
			$data['all_obligations'] = $this->Obligation_model->get_all_obligations_where($params);

			$this->load->model('Absence_model');
			$params = array("BLOCK_SCHEDULE_ID" => $ID);
			$data['all_absences'] = $this->Absence_model->get_all_absences_where($params);

            $this->load->model('Pdf_model');
            $data["docs"] = $this->Pdf_model->get_all_stage_pdf($ID);

			$data['block_count'] = get_blocks_by_internship_id($ID);

			if ($this->session->status == "student") {
				$params = array("USER_TYPE" => "1", "USER_ID" => $this->session->userid, "INTERNSHIP_ID" => $ID);
				$data['all_your_obligations'] = $this->Obligation_model->get_all_obligations_where($params);
			}
			if ($this->session->status == "teacher") {
				$params = array("USER_TYPE" => "2", "INTERNSHIP_ID" => $ID);
				$data['all_your_obligations'] = $this->Obligation_model->get_all_obligations_where($params);
			}
			if ($this->session->status == "employer") {
				$params = array("USER_TYPE" => "3", "USER_ID" => $this->session->userid, "INTERNSHIP_ID" => $ID);
				$data['all_your_obligations'] = $this->Obligation_model->get_all_obligations_where($params);
			}

			$this->load->model('Document_model');
			if ($this->session->status == "student") {
				$params = array("CANSEE_STUDENT" => "1", "INTERNSHIP_ID" => $ID);
				$data['all_documents'] = $this->Document_model->get_all_documents_where($params);
			}
			if ($this->session->status == "teacher") {
				$params = array("CANSEE_TEACHER" => "1", "INTERNSHIP_ID" => $ID);
				$data['all_documents'] = $this->Document_model->get_all_documents_where($params);
			}
			if ($this->session->status == "employer") {
				$params = array("CANSEE_EMPLOYER" => "1", "INTERNSHIP_ID" => $ID);
				$data['all_documents'] = $this->Document_model->get_all_documents_where($params);
			}

			$this->load->model('Block_model');
			$params = array("INTERNSHIP_ID" => $ID);
			$data['all_blocks'] = $this->Block_model->get_all_blocks_where($params);
			foreach ($data['all_blocks'] as &$block) {
				$block_schedule_total_hours = 0;
				$block_schedule_total_absences = 0;
				$block_schedules = $this->Block_model->get_block_schedules($block["ID"]);
				foreach ($block_schedules as $block_schedule) {
					$block_schedule_value = json_decode($block_schedule["VALUE"]);
					if (is_numeric($block_schedule_value->TOTAL)) {
						$block_schedule_total_hours += $block_schedule_value->TOTAL;
					}
					if ((!isset($block_schedule_value->PRESENT)) && (!isset($block_schedule_value->CLOSED))) {
						$block_schedule_total_hours += $block_schedule_value->TOTAL;
						$block_schedule_total_absences += 1;
					}
				}
				$block["SCHEDULE_TOTAL_HOURS"] = sprintf("%.2f", $block_schedule_total_hours);
				$block["SCHEDULE_TOTAL_ABSENCES"] = $block_schedule_total_absences;
			}

			$params = array("INTERNSHIP_ID" => $ID);
			$data['all_block_schedules'] = $this->Block_model->get_all_block_schedules_where($params);
			foreach ($data['all_block_schedules'] as &$schedule) {
				$schedule["VALUE"] = json_decode($schedule["VALUE"]);
			}

			$this->load->model('Note_model');
			$params = array("INTERNSHIP_ID" => $ID);
			$data['all_notes'] = $this->Note_model->get_all_notes_where($params);

			$this->load->model('Message_model');

			if (is_teacher()) {
				$data['all_messages'] = $this->Message_model->get_messages_for_user($this->session->userid, "2");
			}
			if (is_student()) {
				$data['all_messages'] = $this->Message_model->get_messages_for_user($this->session->userid, "1");
			}
			if (is_employer()) {
				$data['all_messages'] = $this->Message_model->get_messages_for_user($this->session->userid, "3");
			}

			$data['internship_actors'] = $this->Internship_model->get_actors_from_internship($ID);
			$data['internship_schedule'] = json_decode($data['internship']['SCHEDULE']);
			//die(var_dump($data['internship_schedule'][0]));
			if (isset($data['internship_schedule'][0]->FROM_EV)) {
				$data['internship_schedule_ev'] = 1;
			} else {
				$data['internship_schedule_ev'] = 0;
			}

			$data['_view'] = 'internship/edit';
			$this->load->view('layouts/main', $data);
		} else {
			show_error('The internship you are trying to edit does not exist.');
		}
	}

	function getmessages() {
		$this->load->model('Message_model');
		$messages = "";

		if (is_teacher()) {
			$messages = $this->Message_model->get_messages_for_user($this->session->userid, "2");
		}
		if (is_student()) {
			$messages = $this->Message_model->get_messages_for_user($this->session->userid, "1");
		}
		if (is_employer()) {
			$messages = $this->Message_model->get_messages_for_user($this->session->userid, "3");
		}

		echo json_encode($messages);
	}

	function sendEmail() {
		$this->load->library('email');
		$this->email->from('rsimard@blitzmedia.io', 'Robin Simard');
		$this->email->to('support@blitzmedia.io');

		$this->email->subject('Email Test');
		$this->email->message('Testing the email class.');

		$this->email->send();
		var_dump($this->email);
		echo "yo";
	}

	function sendmessages() {
		//RETURN IF SOMETHING IS EMPTY

		if (isset($_POST) && count($_POST) > 0) {
			//FORM VALIDATION RULES
			$this->form_validation->set_rules('internship_id', 'NUMÉRO DE STAGE', 'required');
			$this->form_validation->set_rules('message_to[]', 'À', 'required');
			$this->form_validation->set_rules('message_from', 'DE', 'required');
			$this->form_validation->set_rules('message_subject', 'SUJET', 'required');
			$this->form_validation->set_rules('message_content', 'CONTENT', 'required');
			$this->form_validation->run();

			if ($this->form_validation->run() == true) {
				//get USER
				foreach ($this->input->post('message_to') as $user_to) {
					$user_to_id = $this->get_string_between($user_to, 'USER_ID\':\'', '\'');
					$user_to_type = $this->get_string_between($user_to, 'USER_TYPE\':\'', '\'');
					$user_from_id = $this->get_string_between($this->input->post('message_from'), 'USER_ID\':\'', '\'');
					$user_from_type = $this->get_string_between($this->input->post('message_from'), 'USER_TYPE\':\'', '\'');

					$params = array(
						'INTERNSHIP_ID' => $this->input->post('internship_id'),
						'TITLE' => $this->input->post('message_subject'),
						'DESCRIPTION' => $this->input->post('message_content'),
						'TO_ID' => $user_to_id,
						'TO_TYPE' => $user_to_type,
						'FROM_ID' => $user_from_id,
						'FROM_TYPE' => $user_from_type,
						'DATE' => date('Y-m-d h:i:s'),
						'READ' => 0,
					);

					$message_id = $this->Message_model->add_message($params);
					echo "ADDED";

					//SEND EMAIL TO USER
					if ($user_to_type == 1) {
						$to_email = get_student_email_by_id($user_to_id);
						email(get_option_value("_SMTP_FROM"), "Gestage", $to_email, "Gestage | Nouveau Message", "Vous avez un nouveau message non lu", $this->input->post('internship_id'), "#vosmessages");
					}

					//SEND EMAIL TO USER
					if ($user_to_type == 2) {
						$to_email = get_teacher_email_by_id($user_to_id);
						email(get_option_value("_SMTP_FROM"), "Gestage", $to_email, "Gestage | Nouveau Message", "Vous avez un nouveau message non lu", $this->input->post('internship_id'), "#vosmessages");
					}

					//SEND EMAIL TO USER
					if ($user_to_type == 3) {
						$to_email = get_employer_email_by_id($user_to_id);
						email(get_option_value("_SMTP_FROM"), "Gestage", $to_email, "Gestage | Nouveau Message", "Vous avez un nouveau message non lu", $this->input->post('internship_id'), "#vosmessages");
					}
				}
			} else {
				$this->form_validation->set_error_delimiters('<div class="form_validation_errors">', '</div>');
				echo validation_errors();
			}
		}
	}

	function delete($ID) {
		//DELETE BLOCKS
		$internship_blocks = $this->Block_model->get_all_blocks_by_internship($ID);
		foreach ($internship_blocks as $b) {
			$this->Block_model->delete_block($b["ID"]);
		}

		//DELETE BLOCKS SCHEDULES
		$internship_block_schedules = $this->Block_model->get_all_block_schedules_by_internship($ID);
		foreach ($internship_block_schedules as $s) {
			$this->Block_model->delete_block_schedule($s["ID"]);
		}

		//DELETE DOCUMENTS
		$internship_documents = $this->Document_model->get_all_documents_by_internship($ID);
		foreach ($internship_documents as $d) {
			$this->Document_model->delete_document($d["ID"]);
		}

		//DELETE NOTES
		$internship_notes = $this->Note_model->get_all_notes_by_internship($ID);
		foreach ($internship_notes as $n) {
			$this->Note_model->delete_note($n["ID"]);
		}

		//DELETE OBLIGATIONS
		$internship_obligations = $this->Obligation_model->get_all_obligations_by_internship($ID);
		foreach ($internship_obligations as $o) {
			$this->Obligation_model->delete_obligation($o["ID"]);
		}

		//DELETE INTERNSHIP
		$this->Internship_model->delete_internship($ID);

		redirect('internship/index');
	}

	/*
	 * Deleting internship
	 */
	function remove($ID) {
		$internship = $this->Internship_model->get_internship($ID);

		// check if the internship exists before trying to delete it
		if (isset($internship['ID'])) {
			$params = array(
				'INACTIVE' => 1,
			);

			$this->Internship_model->update_internship($ID, $params);
			redirect('internship/index');
		} else {
			show_error("Le stage que vous essayer de supprime n'existe pas");
		}
	}

	//SET INTERNSHIPS INACTIVE TO 1 IN DB
	function setinactive($ID) {
		$internship = $this->Internship_model->get_internship($ID);

		//CHECK IF THE INTERNSHIP ID EXISTS BEFORE SETTING INACTIVE
		if (isset($internship['ID'])) {
			$params = array(
				'INACTIVE' => 1,
			);

			$this->Internship_model->update_internship($ID, $params);
			redirect('internship/index');
		} else {
			show_error("Le stage n'existe pas");
		}
	}

	//SET INTERNSHIPS INACTIVE TO 0 IN DB
	function setactive($ID) {
		$internship = $this->Internship_model->get_internship($ID);

		//CHECK IF THE INTERNSHIP ID EXISTS BEFORE SETTING ACTIVE
		if (isset($internship['ID'])) {
			$params = array(
				'INACTIVE' => 0,
			);

			$this->Internship_model->update_internship($ID, $params);
			redirect('internship/index');
		} else {
			show_error("Le stage n'existe pas");
		}
	}

	//ADD A BLOCK OF DATE FOR INTERNSHIP
	function add_block() {
		$this->load->helper(array('form', 'url'));
		$this->load->library('form_validation');

		//CHECK IF USER SUBMIT A NEW EMPLOYER
		if (isset($_POST) && count($_POST) > 0) {
			//FORM VALIDATION RULES
			$this->form_validation->set_rules('DATE_START', 'DATE DE DÉBUT', 'required');
			$this->form_validation->set_rules('DATE_END', 'DATE DE FIN', 'required');
			$this->form_validation->set_rules('INTERNSHIP_ID', 'NUMÉRO DE STAGE', 'required');
			$this->form_validation->set_rules('NAME', 'NOM', 'required');
			$this->form_validation->set_rules('TEACHER_ID', 'ENSEIGNANT', 'required');
			$this->form_validation->set_rules('TOTAL_HOURS', 'HEURES TOTAL', 'numeric');
			$this->form_validation->run();

			//CHECK IF ALL VALIDATION ARE GOOOD AND INSERT IN DB THEN REDIRECT IN INTERNSHIP EDIT
			if ($this->form_validation->run() == true) {
				$params = array(
					'NAME' => $this->input->post('NAME'),
					'DATE_START' => $this->input->post('DATE_START'),
					'DATE_END' => $this->input->post('DATE_END'),
					'INTERNSHIP_ID' => $this->input->post('INTERNSHIP_ID'),
					'TEACHER_ID' => $this->input->post('TEACHER_ID'),
					'TOTAL_HOURS' => $this->input->post('TOTAL_HOURS'),
				);

				$block_id = $this->Block_model->add_block($params);
				echo "ADDED";
			} else {
				$this->form_validation->set_error_delimiters('<div class="form_validation_errors">', '</div>');
				echo validation_errors();
			}
		}
	}

	function add_absence() {
		$this->load->helper(array('form', 'url'));
		$this->load->library('form_validation');

		//CHECK IF USER SUBMIT A NEW EMPLOYER
		if (isset($_POST) && count($_POST) > 0) {
			//FORM VALIDATION RULES
			$this->form_validation->set_rules('FORDATE', 'DATE DE L\'ABSENCE', 'required');
			$this->form_validation->set_rules('NOTE', 'NOTE', 'required');
			$this->form_validation->run();
			date_default_timezone_set('America/New_York');

			//CHECK IF ALL VALIDATION ARE GOOOD AND INSERT IN DB THEN REDIRECT IN INTERNSHIP EDIT
			if ($this->form_validation->run() == true) {
				$params = array(
					'INTERNSHIP_ID' => $this->input->post('INTERNSHIP_ID'),
					'BY_ID' => $this->input->post('CREATOR_ID'),
					'BY_TYPE' => $this->input->post('CREATOR_TYPE'),
					'REPORTDATE' => date('Y-m-d h:i:s'),
					'FULLDAY' => $this->input->post('FULLDAY'),
					'HOURS' => $this->input->post('HOURS'),
					'FORDATE' => $this->input->post('FORDATE'),
					'NOTE' => $this->input->post('NOTE'),
				);

				$block_id = $this->Absence_model->add_absence($params);
				echo "ADDED";
			} else {
				$this->form_validation->set_error_delimiters('<div class="form_validation_errors">', '</div>');
				echo validation_errors();
			}
		}
	}

	function get_string_between($string, $start, $end) {
		$string = ' ' . $string;
		$ini = strpos($string, $start);
		if ($ini == 0) {
			return '';
		}
		$ini += strlen($start);
		$len = strpos($string, $end, $ini) - $ini;
		return substr($string, $ini, $len);
	}
}
