<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Student extends MY_Controller {
	function __construct() {
		parent::__construct();
		$this->load->model('Internship_model');
		$this->load->model('Student_model');
		$this->load->model('Program_model');
	}

	function login_as($ID) {
		if (!is_admin()) {
			show_error("Vous devez être un administrateur pour faire cela");
		}

		$stu = $this->Student_model->get_student($ID);
		$admin = $this->session->userdata("userid");
		foreach ($this->session->all_userdata() as $D => $V) {
			$this->session->unset_userdata($D);
		}
		$this->session->set_userdata(array(
			"userid" => $stu["ID"],
			"status" => "student",
			"status_id" => 1,
			"name" => $stu["NAME"],
			"mail" => $stu["EMAIL_CS"],
			"program_id" => $stu["PROGRAM_ID"],
			"logged_in" => 1,
			"ADMIN" => $admin,
		));
		redirect("dashboard/index");
	}

	/*
	 * Listing of students
	 */
	function index() {
		$data['students'] = $this->Student_model->get_all_students();
		$data['archived_students'] = $this->Student_model->get_all_archived_students();

		$data['_view'] = 'student/index';
		$this->load->view('layouts/main', $data);
	}

	/*
	 * Adding a new student
	 */

	function set_program($student_id = 0) {
		if ($student_id == 0) {
			if ($this->session->userdata("userid")) {
				$student_id = $this->session->userdata("userid");
			}
		}

		$data["all_programs"] = $this->Program_model->get_all_programs();
		$data['student'] = $this->Student_model->get_student($student_id);

		if (isset($data['student']['ID'])) {
			$this->load->library('form_validation');
			$this->form_validation->set_rules('PROGRAM_ID', 'Programme', 'required');

			if ($this->form_validation->run()) {
				$params = array('PROGRAM_ID' => $this->input->post('PROGRAM_ID'));
				$this->Student_model->update_student($data['student']['ID'], $params);
				$this->session->set_userdata('program_id', $this->input->post('PROGRAM_ID'));
				redirect("/dashboard");
			} else {
				$data['_view'] = 'student/set_program';
				$this->load->view('layouts/main', $data);
			}
		}
	}

	function add() {
		//LOAD PROGRAMS
		$data["all_programs"] = $this->Program_model->get_all_programs();
		$this->load->library('form_validation');

		$this->form_validation->set_rules('EMAIL_CS', 'COURRIEL CS', 'valid_email|required');
		$this->form_validation->set_rules('NAME', 'NOM', 'required');
		$this->form_validation->set_rules('PROGRAM_ID', 'PROGRAMME', 'numeric|required');
		$this->form_validation->set_rules('PASSWORD', 'MOT DE PASSE', 'required');
		$this->form_validation->set_rules('SCHOOL', 'ÉCOLE', 'required');

		if ($this->form_validation->run()) {
			$params = array(
				'NAME' => $this->input->post('NAME'),
				'EMAIL_CS' => $this->input->post('EMAIL_CS'),
				'PROGRAM_ID' => $this->input->post('PROGRAM_ID'),
				'SCHOOL' => $this->input->post('SCHOOL'),
				'PASSWORD_HASH' => password_hash($this->input->post('PASSWORD'), PASSWORD_BCRYPT),
				'TEACHER_ID' => 0,
			);

			$student_id = $this->Student_model->add_student($params);
			redirect('student/index');
		} else {
			$data['_view'] = 'student/add';
			$this->load->view('layouts/main', $data);
		}
	}

	/*
	 * Editing a student
	 */
	function edit($ID) {
		// check if the student exists before trying to edit it
		$data['student'] = $this->Student_model->get_student($ID);
		$data["all_programs"] = $this->Program_model->get_all_programs();

		if (isset($data['student']['ID'])) {
			$this->load->library('form_validation');

			$this->form_validation->set_rules('PROGRAM_ID', 'PROGRAM', 'numeric|required');
			$this->form_validation->set_rules('EMAIL_CS', 'EMAIL', 'valid_email|required');
			$this->form_validation->set_rules('NAME', 'NOM', 'required');
			$this->form_validation->set_rules('SCHOOL', 'ÉCOLE', 'required');

			if ($this->form_validation->run()) {
				$params = array(
					'PROGRAM_ID' => $this->input->post('PROGRAM_ID'),
					'EMAIL_CS' => $this->input->post('EMAIL_CS'),
					'NAME' => $this->input->post('NAME'),
					'SCHOOL' => $this->input->post('SCHOOL'),
				);

				$this->Student_model->update_student($ID, $params);
				redirect('student/index');
			} else {
				$data['_view'] = 'student/edit';
				$this->load->view('layouts/main', $data);
			}
		} else {
			show_error('The student you are trying to edit does not exist.');
		}
	}

	function password($ID) {
		$pass = $this->input->post("PASS");
		$confirm = $this->input->post("CONFIRM");
		if ($pass != $confirm) {
			redirect("/student/edit/$ID?pass=error");
			return;
		}

		$this->Student_model->update_student($ID, array("PASSWORD_HASH" => password_hash($pass, PASSWORD_BCRYPT)));
		redirect("/student/edit/$ID");
	}

	function archive_student($ID) {
		$this->Student_model->update_student($ID, array("ARCHIVE" => 1));
		redirect("/student/index");
	}

	function unarchive_student($ID) {
		$this->Student_model->update_student($ID, array("ARCHIVE" => 0));
		redirect("/student/index");
	}

	/*
	 * Deleting student
	 */
	function remove($ID) {
		$student = $this->Student_model->get_student($ID);

		// check if the student exists before trying to delete it
		if (isset($student['ID'])) {
			$this->Student_model->delete_student($ID);
			redirect('student/index');
		} else {
			show_error('The student you are trying to delete does not exist.');
		}
	}
}
