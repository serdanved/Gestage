<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

function randomPassword() {
    $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
    $pass = array(); //remember to declare $pass as an array
    $alphaLength = strlen($alphabet) - 1; //put the length - 1 in cache
    for ($i = 0; $i < 8; $i++) {
        $n = rand(0, $alphaLength);
        $pass[] = $alphabet[$n];
    }
    return implode($pass); //turn the array into a string
}

class Employer extends MY_Controller {
	function __construct() {
		parent::__construct();
		$this->load->model('Employer_model');
		$this->load->model('Program_model');
		$this->load->model('Employer_program_model');
		$this->load->model('Teacher_model');
		$this->load->model("Option_model");
	}

	function login_as($ID) {
		if (!is_admin()) {
			show_error("Vous devez être un administrateur pour faire cela");
		}

		$emp = $this->Employer_model->get_employer($ID);
		$admin = $this->session->userdata("userid");
		foreach($this->session->all_userdata() as $D => $V) {
            $this->session->unset_userdata($D);
        }
		$this->session->set_userdata(array(
			"userid" => $emp["ID"],
			"status" => "employer",
			"status_id" => 3,
			"name" => $emp["EMPLOYER_NAME"],
			"mail" => null,
			"logged_in" => 1,
			"ADMIN" => $admin,
		));
		redirect("dashboard/index");
	}

	//LIST OF EMPLOYERS | GET EMPLOYERS DATA
	function index() {
		if (is_teacher()) {
			$program_ids = array();
			$data['teacher_programs'] = $this->Teacher_model->get_teacher_programs($this->session->userdata("userid"));
			foreach ($data['teacher_programs'] as $teacher_program) {
				array_push($program_ids, $teacher_program["ID"]);
			}
			$data['teacher_programs_not'] = $this->Teacher_model->get_teacher_programs_not($program_ids);

			$data['employers'] = $this->Employer_model->get_all_employers();
			$data['_view'] = 'employer/index';
			$this->load->view('layouts/main', $data);
		}

		if (is_admin()) {
			$data['_view'] = 'employer/index';
			$this->load->view('layouts/main', $data);
		}
	}

	function setcategory($employer_id, $program_id) {
		$query = "DELETE FROM EMPLOYERS_CAT_PROGRAMS WHERE PROGRAM_ID = " . $program_id . " AND EMPLOYER_ID = " . $employer_id;
		$this->db->query($query);
		$query = "INSERT INTO EMPLOYERS_CAT_PROGRAMS(CATEGORY_ID,PROGRAM_ID,EMPLOYER_ID) VALUES(" . $_POST["category_id"] . "," . $program_id . "," . $employer_id . ")";

		$this->db->query($query);
		redirect("employer/edit/" . $employer_id);
	}

	function catedit($ID) {
		$data['category'] = $this->Employer_model->get_category($ID);

		if (isset($data['category']['ID'])) {
			if (isset($_POST) && count($_POST) > 0) {
				$params = array(
					'NAME' => $this->input->post('NAME'),
					'PROGRAM_ID' => $this->input->post('PROGRAM'),
				);

				$this->Employer_model->update_category($ID, $params);
				redirect('employer/catindex');
			}

			$data['_view'] = 'employer/cat_edit';
			$this->load->view('layouts/main', $data);
		} else {
			show_error('The category you are trying to edit does not exist.');
		}
	}

	function catadd() {
		if (isset($_POST) && count($_POST) > 0) {
			$params = array(
				'NAME' => $this->input->post('NAME'),
				'PROGRAM_ID' => $this->input->post('PROGRAM'),
			);

			$catid = $this->Employer_model->add_category($params);
			redirect('employer/catindex');
		}

		$data['_view'] = 'employer/cat_add';
		$this->load->view('layouts/main', $data);
	}

	function catindex() {
		if (!is_admin()) {
			redirect("/");
			return;
		}

		$data["cats"] = $this->Employer_model->get_all_categories();
		$data['_view'] = 'employer/cat_index';
		$this->load->view('layouts/main', $data);
	}

	function sendinfo() {
		if ($this->input->post("employer_id")) {
			$employer = $this->Employer_model->get_employer($this->input->post("employer_id"));
            $pass = randomPassword();
            $this->Employer_model->update_employer($employer["ID"], array(
                "PASSWORD_HASH" => password_hash($pass, PASSWORD_BCRYPT),
            ));

			foreach ($this->Employer_model->get_all_employer_contacts($employer["ID"]) as $c) {
				$email_to = trim($c['CONTACT_EMAIL']);
				$email_message = "Utilisateur : {$employer['PHONEHASH']}<br>Mot de passe : $pass";
				if (filter_var($email_to, FILTER_VALIDATE_EMAIL)) {
					email(get_option_value("_SMTP_FROM"), "Gestage", $email_to, "Gestage | Demande d'information de connexion", $email_message, "", "");
				}
			}

			echo "DONE";
		}
	}

	function add_program() {
		//var_dump($this->input->post());

		if (($this->input->post("program_id")) && ($this->input->post("employer_id"))) {
			$params = array(
				'EMPLOYER_ID' => $this->input->post('employer_id'),
				'PROGRAM_ID' => $this->input->post('program_id'),
			);

			$this->Employer_model->add_employer_program($params);
			echo "DONE";
		}
	}

	//FUNCTION GET EMPLOYERS FROM PROGRAM ID
	function get_employers_from_program() {
		if ($this->input->post("program_id")) {
			$program_array = $this->Employer_model->get_program_employers($this->input->post("program_id"));
			echo json_encode($program_array);
		} else {
			echo "";
		}
	}

	//FUNCTION GET EMPLOYER CONTACT
	function get_employer_contacts() {
		if ($this->input->post("employer_id")) {
			$contact_array = $this->Employer_model->get_all_employer_contacts($this->input->post("employer_id"));
			echo json_encode($contact_array);
		} else {
			echo "";
		}
	}

	public function programs() {
		// $this->mybreadcrumb->add('Home', base_url());
		// $this->mybreadcrumb->add('Cities', base_url('cities/listing'));
		// $data['breadcrumbs'] = $this->mybreadcrumb->render();
		$data['assigned_employers'] = $this->Employer_model->get_all_employers_with_programs();
		$data['unassigned_employers'] = $this->Employer_model->get_all_employers_without_programs();
		$data['_view'] = 'employer/programs';
		$this->load->view('layouts/main', $data);
	}

	public function edit_programs($ID) {
		// check if the teacher exists before trying to edit it
		$data['employer'] = $this->Employer_model->get_employer($ID);
		$data['employer_programs'] = $this->Employer_model->get_employer_programs($ID);

		if (isset($data['employer']['ID'])) {
			$this->load->library('form_validation');

			$this->form_validation->set_rules('EMPLOYER_NAME', 'NOM EMPLOYEUR', 'required');
			//$this->form_validation->set_rules('PROGRAM_IDS[]','PROGRAM IDS','required');

			if ($this->form_validation->run()) {
				// die(var_dump($this->input->post()));

				//UPDATE TEACHERS NAME
				$params = array(
					'EMPLOYER_NAME' => $this->input->post('EMPLOYER_NAME'),
				);
				$this->Employer_model->update_employer($ID, $params);

				//UPDATE TEACHER PROGRAMS
				$this->Employer_model->update_employer_programs($ID, $this->input->post('PROGRAM_IDS'));

				if ($this->session->userdata("status") == "employer") {
					redirect('/dashboard');
				} else {
					redirect('employer/programs');
				}
			} else {
				$this->load->model('Program_model');
				$data['all_programs'] = $this->Program_model->get_all_programs();

				$data['_view'] = 'employer/edit_programs';
				$this->load->view('layouts/main', $data);
			}
		} else {
			show_error('The employer you are trying to edit does not exist.');
		}
	}

	function profile() {
		$schoolName = $this->Option_model->get_option(1)["VALUE"];
		if (is_employer()) {
			$data["typeid"] = "3";
			$data["user"] = $this->Employer_model->get_employer($this->session->userid);
			$data['employer_contacts'] = $this->Employer_model->get_all_employer_contacts($this->session->userid);
			$data['type'] = "Employeur pour $schoolName";

			$data['_view'] = 'employer/profile';
			$ID = $this->session->userid;

			//CHECK IF USER IS EDITING
			if (count($this->input->post()) > 0) {
				$ID = $this->session->userid;
				//FORM VALIDATION RULES
				$this->form_validation->set_rules('EMPLOYER_NAME', 'NOM EMPLOYEUR', 'required');
				$this->form_validation->set_rules('PHONE', 'NUMÉRO DE TÉLÉPHONE', 'required');
				$this->form_validation->set_rules('EMAIL', 'COURRIEL', 'required|valid_email');
				$this->form_validation->set_rules('PROVINCE', 'PROVINCE', 'required');
				$this->form_validation->set_rules('CITY', 'VILLE', 'required');
				$this->form_validation->set_rules('ADDRESS', 'ADRESSE', 'required');
				$this->form_validation->set_rules('PHONEHASH', 'ID CONNEXION',
					array(
						'required',
						array(
							"unique",
							function($value) {
								$count = $this->db->where("PHONEHASH", $value)->from("employers")->count_all_results();
								if ($count > 0) {
									$this->form_validation->set_message('unique', 'Un utilisateur avec ce ID existe déjà');
									return false;
								} else {
									return true;
								}
							},
						),
					));
				$this->form_validation->set_rules('POSTAL_CODE', 'CODE POSTAL', 'callback_zip_check');

				//CHECK IF ALL VALIDATION ARE GOOOD AND INSERT IN DB THEN REDIRECT IN EMPLOYER INDEX
				if ($this->form_validation->run()) {
					$params = array(
						'PHONEHASH' => $this->input->post('PHONEHASH'),
						'EMPLOYER_NAME' => $this->input->post('EMPLOYER_NAME'),
						'PHONE' => preg_replace("/[^0-9]+/", "", $this->input->post('PHONE')),
						'PROVINCE' => $this->input->post('PROVINCE'),
						'CITY' => $this->input->post('CITY'),
						'ADDRESS' => $this->input->post('ADDRESS'),
						'POSTAL_CODE' => strtoupper(preg_replace("/[^a-zA-Z0-9]+/", "", $this->input->post('POSTAL_CODE'))),
						'EMAIL' => $this->input->post('EMAIL'),
					);

					$this->Employer_model->update_employer($ID, $params);
				}
			}

			$this->load->view('layouts/main', $data);
		}
	}

	//ADD AN EMPLOYER
	function add() {
		$this->load->helper(array('form', 'url'));
		$this->load->library('form_validation');

        if (is_admin()) {
            $data['all_programs'] = $this->Program_model->get_all_programs();
        } else {
            $data['all_programs'] = $this->Teacher_model->get_teacher_programs($this->session->userdata("userid"));
        }

		//CHECK IF USER SUBMIT A NEW EMPLOYER
		if ($this->input->post('PHONEHASH')) {
			//FORM VALIDATION RULES
			$_POST['PHONEHASH'] = preg_replace("/[^0-9]+/", "", $this->input->post('PHONEHASH'));
			$this->form_validation->set_rules('EMPLOYER_NAME', 'NOM EMPLOYEUR', 'required');

			$this->form_validation->set_rules('PROVINCE', 'PROVINCE', 'required');
			$this->form_validation->set_rules('CITY', 'VILLE', 'required');
			$this->form_validation->set_rules('ADDRESS', 'ADRESSE', 'required');
			$this->form_validation->set_rules('PHONEHASH', 'ID CONNEXION', 'required');
			$this->form_validation->run();

			//CHECK IF ALL VALIDATION ARE GOOOD AND INSERT IN DB THEN REDIRECT IN EMPLOYER INDEX
			if ($this->form_validation->run()) {
				//MANAGE INSERT HERE
				$this->form_validation->set_rules('PROVINCE', 'PROVINCE', 'required');
				$this->form_validation->set_rules('CITY', 'VILLE', 'required');
				$this->form_validation->set_rules('ADDRESS', 'ADRESSE', 'required');
				$this->form_validation->set_rules('POSTAL_CODE', 'CODE POSTAL', 'callback_zip_check');
				$this->form_validation->set_rules('EMPLOYER_NAME', 'NOM EMPLOYEUR', 'required');
				$this->form_validation->set_rules('PHONEHASH', 'ID CONNEXION', 'required');
				$check_employer = $this->form_validation->run();

				if ($this->form_validation->run() == true) {
					$params = array(
						'PHONEHASH' => $this->input->post('PHONEHASH'),
						'PASSWORD_HASH' => password_hash("1234", PASSWORD_BCRYPT),
						'EMPLOYER_NAME' => $this->input->post('EMPLOYER_NAME'),
						'PROVINCE' => $this->input->post('PROVINCE'),
						'CITY' => $this->input->post('CITY'),
						'ADDRESS' => $this->input->post('ADDRESS'),
						'POSTAL_CODE' => strtoupper(preg_replace("/[^a-zA-Z0-9]+/", "", $this->input->post('POSTAL_CODE'))),
						'NOTE' => $this->input->post('NOTE'),
						'VISIBLE' => '1',
						'EMAIL' => $this->input->post("CONTACT_EMAIL"),
					);

					$employer_id = $this->Employer_model->add_employer($params);

					$params = array(
						'EMPLOYER_ID' => $employer_id,
						'CONTACT_NAME' => $this->input->post("CONTACT_NAME"),
						'CONTACT_PHONE' => $this->input->post('CONTACT_PHONE'),
						'CONTACT_EMAIL' => $this->input->post("CONTACT_EMAIL"),
					);

					$this->Employer_model->add_employer_contact($params);
				}
			}

			//ADD PERMISION IF USER EXISTS BUT NOT IN EMPLOYER_PROGRAM
			if ($this->input->post('PROGRAM_ID')) {
				$employer_id = $this->Employer_model->get_employer_id($this->input->post('PHONEHASH'));
				$program_id = $this->input->post('PROGRAM_ID');
				if ($this->employer_programs_add($employer_id, $program_id)) {
					redirect('employer/index');
				}
			}
		}

		$data['_view'] = 'employer/add';
		$this->load->view('layouts/main', $data);
	}

	//INSERT IN TABLE EMPLOYER_PROGRAMS
	function employer_programs_add($EMPLOYER_ID, $PROGRAM_ID) {
		//CHECK PARAMETERS IF NOT EMPTY
		if (isset($EMPLOYER_ID) && isset($PROGRAM_ID)) {
			//CHECK IF NOT ALREADY IN TABLE EMPLOYER_PROGRAM THEN INSERT
			if (!$this->Employer_program_model->is_in_database($EMPLOYER_ID, $PROGRAM_ID)) {
				$params1 = array(
					'EMPLOYER_ID' => $EMPLOYER_ID,
					'PROGRAM_ID' => $PROGRAM_ID,
				);
				$employer_program_id = $this->Employer_program_model->add_employer_program($params1);
			}
			return true;
		}
		return false;
	}

	function add_employer_contact() {
		$employers = $this->Employer_model->get_all_employers();
		foreach ($employers as $e) {
			$params = array(
				'EMPLOYER_ID' => $e["ID"],
				'CONTACT_NAME' => $e["CONTACT_NAME"],
				'CONTACT_PHONE' => $e["PHONE"],
				'CONTACT_EMAIL' => $e["EMAIL"],
			);
			//$this->Employer_model->add_employer_contact($params);
		}
	}

	function add_internship_contact() {
		$this->load->model('Internship_model');
		$internships = $this->Internship_model->get_all_internships_custom();

		foreach ($internships as $i) {
			$employer_contacts = $this->Employer_model->get_all_employer_contacts($i["EMPLOYER_ID"]);
			foreach ($employer_contacts as $c) {
				$params = array('EMPLOYER_CONTACT_ID' => $c["ID"]);

				$this->Internship_model->update_internship($i["ID"], $params);
			}
		}
	}

	function add_employer_contact_ajax() {
		if (($this->input->post("EMPLOYER_ID")) && ($this->input->post("CONTACT_NAME")) && ($this->input->post("CONTACT_PHONE")) && ($this->input->post("CONTACT_EMAIL"))) {
			$params = array(
				'EMPLOYER_ID' => $this->input->post("EMPLOYER_ID"),
				'CONTACT_NAME' => $this->input->post("CONTACT_NAME"),
				'CONTACT_PHONE' => $this->input->post("CONTACT_PHONE"),
				'CONTACT_EMAIL' => $this->input->post("CONTACT_EMAIL"),
			);

			$this->Employer_model->add_employer_contact($params);

			echo "ADDED";
		}
	}

	//EDIT AN EMPLOYER BY HIS ID
	function edit($ID) {
		$this->load->helper(array('form', 'url'));
		$this->load->library('form_validation');
		$data['employer'] = $this->Employer_model->get_employer($ID);
		$data['employer_contacts'] = $this->Employer_model->get_all_employer_contacts($ID);
		$data['teacher_programs'] = $this->Teacher_model->get_teacher_programs($this->session->userdata("userid"));

		//CHECK IF THE EMPLOYER EXISTS
		if ($data['employer'] !== null) {
			//CHECK IF USER IS EDITING
			if (count($this->input->post()) > 0) {
				//FORM VALIDATION RULES
				$_POST['PHONE'] = preg_replace("/[^0-9]+/", "", $this->input->post('PHONE'));
				$this->form_validation->set_rules('EMPLOYER_NAME', 'NOM EMPLOYEUR', 'required');

				//CHECK IF USER IS UPDATING PHONE BEFORE CHECKS TO FIGHT AGSINT UNIQUE CONSTRAINT

				$this->form_validation->set_rules('PROVINCE', 'PROVINCE', 'required');
				$this->form_validation->set_rules('CITY', 'VILLE', 'required');
				$this->form_validation->set_rules('ADDRESS', 'ADRESSE', 'required');
				//$this->form_validation->set_rules('POSTAL_CODE','CODE POSTAL', 'callback_zip_check');
				$this->form_validation->set_rules('PHONEHASH', 'ID CONNEXION', 'required');
				$this->form_validation->run();

				//CHECK IF ALL VALIDATION ARE GOOOD AND INSERT IN DB THEN REDIRECT IN EMPLOYER INDEX
				if ($this->form_validation->run() == true) {
					$params = array(
						'PHONEHASH' => $this->input->post('PHONEHASH'),
						'EMPLOYER_NAME' => $this->input->post('EMPLOYER_NAME'),
						'PROVINCE' => $this->input->post('PROVINCE'),
						'CITY' => $this->input->post('CITY'),
						'ADDRESS' => $this->input->post('ADDRESS'),
						'POSTAL_CODE' => strtoupper(preg_replace("/[^a-zA-Z0-9]+/", "", $this->input->post('POSTAL_CODE'))),
						'NOTE' => $this->input->post('NOTE'),
					);

					$this->Employer_model->update_employer($ID, $params);
					redirect('employer/index');
				}
			}
		} else {
			show_error("L'EMPLOYÉ QUE VOUS VOULEZ MODIFIER N'EXISTE PAS");
		}

		//IF USER DIDN'T EDIT AN EMPLOYER LOAD BASIC VIEW
		$data['_view'] = 'employer/edit';
		$this->load->view('layouts/main', $data);
	}

    //CHANGE PASSWORD FOR EMPLOYER
    function change_password($ID) {
        $employer = $this->Employer_model->get_employer($ID);
        if ($employer != null) {
            $this->Employer_model->update_employer($employer["ID"], array(
                "PASSWORD_HASH" => password_hash($this->input->post("NEW_PASSWORD"), PASSWORD_BCRYPT),
            ));
            redirect("/employer/edit/$ID");
        } else {
            redirect("/employer/index");
        }
    }

    function profile_password() {
        if (is_employer()) {
			$employer = $this->Employer_model->get_employer($this->session->userid);
            $this->Employer_model->update_employer($employer["ID"], array(
                "PASSWORD_HASH" => password_hash($this->input->post("NEW_PASSWORD"), PASSWORD_BCRYPT),
            ));
        }

        redirect("/employer/profile");
    }

	//SET INACTIVE TO 1 FOR AN EMPLOYER
	function remove_employer_program($EMPLOYER_ID, $PROGRAM_ID) {
		//CHECK IF THE EMPLOYE EXISTS BEFORE UPDATING
		if (isset($EMPLOYER_ID) && isset($PROGRAM_ID)) {
			$this->Employer_program_model->delete_employer_from_program($EMPLOYER_ID, $PROGRAM_ID);
			redirect('employer/index');
		} else {
			show_error("L'employé et programme n'existent pas");
		}
	}

	function remove_employer_contact($EMPLOYER_CONTACT_ID, $EMPLOYER_ID) {
		if (isset($EMPLOYER_CONTACT_ID)) {
			$this->Employer_model->delete_employer_contact($EMPLOYER_CONTACT_ID);
			redirect('employer/edit/' . $EMPLOYER_ID);
		}
	}

	function delete_employer($ID) {
		$this->db->delete("EMPLOYER_CONTACTS", array("EMPLOYER_ID" => $ID));
		$this->db->delete("EMPLOYER_PROGRAMS", array("EMPLOYER_ID" => $ID));
		$this->db->delete("EMPLOYERS", array("ID" => $ID));
		redirect("/employer/index");
	}

	//USED TO FORM VALIDATE A ZIP ZODE
	function zip_check($zip) {
		$regex = '/^([a-zA-Z]\d[a-zA-Z])\ {0,1}(\d[a-zA-Z]\d)$/';

		//CHECK IF POSTAL CODE MIS EMPTY ELSE RETURN ERROR
		if ($zip == "") {
			$this->form_validation->set_message('zip_check', "LE CHAMP CODE POSTAL EST OBLIGATOIRE.");
			return false;
		}
		//CHECK IF POSTAL CODE MATCH THE REGEX ELSE RETURN ERROR
		if (!preg_match($regex, $zip)) {
			$this->form_validation->set_message('zip_check', "LE CHAMP CODE POSTAL N'EST PAS VALIDE.");
			return false;
		}
	}

	function batch_save_contacts($EMPLOYER_ID) {
		$ids = $this->input->post("id");
		$names = $this->input->post("name");
		$emails = $this->input->post("email");
		$phones = $this->input->post("phone");

		if (is_array($ids) && is_array($names) && is_array($emails) && is_array($phones)) {
			foreach ($ids as $i => $id) {
				$this->Employer_model->update_employer_contact($id, array("CONTACT_NAME" => $names[$i], "CONTACT_PHONE" => $phones[$i], "CONTACT_EMAIL" => $emails[$i],));
			}
		}

		redirect('employer/edit/' . $EMPLOYER_ID);
	}
}
