<?php /*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Note extends MY_Controller {
	function __construct() {
		parent::__construct();
		$this->load->model('Note_model');
	}

	/*
	 * Listing of notes
	 */
	function index() {
		$data['notes'] = $this->Note_model->get_all_notes();

		$data['_view'] = 'note/index';
		$this->load->view('layouts/main', $data);
	}

	/*
	 * Adding a new note
	 */
	function add() {
		if (isset($_POST) && count($_POST) > 0) {
			//FORM VALIDATION RULES
			$this->form_validation->set_rules('DESCRIPTION', 'DESCRIPTION', 'required');
			$this->form_validation->run();
			date_default_timezone_set('America/New_York');
			//CHECK IF ALL VALIDATION ARE GOOOD AND INSERT IN DB THEN REDIRECT IN INTERNSHIP EDIT
			if ($this->form_validation->run() == true) {
				if ($this->input->post('PRIVATE')) {
					$private = 1;
				} else {
					$private = 0;
				}

				$params = array(
					'INTERNSHIP_ID' => $this->input->post('INTERNSHIP_ID'),
					'CREATOR_TYPE' => $this->input->post('CREATOR_TYPE'),
					'CREATOR_ID' => $this->input->post('CREATOR_ID'),
					'DESCRIPTION' => $this->input->post('DESCRIPTION'),
					'DATE' => date('Y-m-d h:i:s'),
					'PRIVATE' => $private,
				);

				$note_id = $this->Note_model->add_note($params);
				echo "ADDED";
			} else {
				$this->form_validation->set_error_delimiters('<div class="form_validation_errors">', '</div>');
				echo validation_errors();
			}
		}
	}

	/*
	 * Editing a note
	 */
	function edit($ID, $INTERNSHIP_ID) {
		// check if the note exists before trying to edit it
		$data['note'] = $this->Note_model->get_note($ID);

		if (isset($data['note']['ID'])) {
			if (isset($_POST) && count($_POST) > 0) {
				if ($this->input->post('PRIVATE')) {
					$private = 1;
				} else {
					$private = 0;
				}

				$params = array(
					'DESCRIPTION' => $this->input->post('DESCRIPTION'),
					'PRIVATE' => $private,
				);

				$this->Note_model->update_note($ID, $params);
				redirect("internship/edit/$INTERNSHIP_ID");
			} else {
				$data['_view'] = 'note/edit';
				$this->load->view('layouts/main', $data);
			}
		} else {
			show_error('The note you are trying to edit does not exist.');
		}
	}

	/*
	 * Deleting note
	 */
	function remove($ID, $INTERNSHIP_ID) {
		$note = $this->Note_model->get_note($ID);

		// check if the note exists before trying to delete it
		if (isset($note['ID'])) {
			$this->Note_model->delete_note($ID);
			redirect("internship/edit/$INTERNSHIP_ID");
		} else {
			show_error('The note you are trying to delete does not exist.');
		}
	}
}
