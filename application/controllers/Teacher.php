<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Teacher extends MY_Controller {
	function __construct() {
		parent::__construct();
		$this->load->model('Teacher_model');
		$this->load->model('Student_model');
	}

	function login_as($ID) {
		if (!is_admin()) {
			show_error("Vous devez Ãªtre un administrateur pour faire cela");
		}

		$tea = $this->Teacher_model->get_teacher($ID);
		$admin = $this->session->userdata("userid");
		foreach ($this->session->all_userdata() as $D => $V) {
			$this->session->unset_userdata($D);
		}
		$this->session->set_userdata(array(
			"userid" => $tea["ID"],
			"status" => "teacher",
			"status_id" => 2,
			"name" => $tea["NAME"],
			"mail" => $tea["EMAIL_CS"],
			"logged_in" => 1,
			"ADMIN" => $admin,
		));
		redirect("dashboard/index");
	}

	/*
	 * Listing of teachers
	 */
	function remove_program($program_id, $user_id) {
		$this->Teacher_model->remove_program($program_id, $user_id);
		$this->db->where("PROGRAM_ID", $program_id)->where("TEACHER_ID", $user_id)->update("STUDENTS", array("TEACHER_ID" => 0));
		redirect('user/profile');
	}

	function get_teachers_from_program() {
		if ($this->input->post("program_id")) {
			$program_array = $this->Teacher_model->get_program_teachers($this->input->post("program_id"));
			echo json_encode($program_array);
		} else {
			echo "";
		}
	}

	public function index() {
		// $this->mybreadcrumb->add('Home', base_url());
		// $this->mybreadcrumb->add('Cities', base_url('cities/listing'));
		// $data['breadcrumbs'] = $this->mybreadcrumb->render();
		$data['activeTeachers'] = $this->Teacher_model->get_all_active_teachers();
		$data['inactiveTeachers'] = $this->Teacher_model->get_all_inactive_teachers();
		$data['_view'] = 'teacher/index';
		$this->load->view('layouts/main', $data);
	}

	/*
	 * Adding a new teacher
	 */
	function add() {
		$this->load->library('form_validation');

		$this->form_validation->set_rules('EMAIL_CS', 'EMAIL CS', 'valid_email|required');
		$this->form_validation->set_rules('PROGRAM_ID', 'PROGRAM ID', 'integer|required');
		$this->form_validation->set_rules('PASSWORD', 'MOT DE PASSE', 'required');

		if ($this->form_validation->run()) {
			$params = array(
				'PROGRAM_ID' => $this->input->post('PROGRAM_ID'),
				'PASSWORD_HASH' => password_hash($this->input->post('PASSWORD'), PASSWORD_BCRYPT),
				'NAME' => $this->input->post('NAME'),
				'EMAIL_CS' => $this->input->post('EMAIL_CS'),
			);

			$teacher_id = $this->Teacher_model->add_teacher($params);
			redirect('teacher/index');
		} else {
			$this->load->model('Program_model');
			$data['all_programs'] = $this->Program_model->get_all_programs();

			$data['_view'] = 'teacher/add';
			$this->load->view('layouts/main', $data);
		}
	}

	/*
	 * Editing a teacher
	 */
	function edit($ID) {
		// check if the teacher exists before trying to edit it
		$data['teacher'] = $this->Teacher_model->get_teacher($ID);
		$data['teacher_programs'] = $this->Teacher_model->get_teacher_programs($ID);

		if (isset($data['teacher']['ID'])) {
			$this->load->library('form_validation');

			$this->form_validation->set_rules('NAME', 'NOM', 'required');
			//$this->form_validation->set_rules('PROGRAM_IDS[]', 'PROGRAM IDS', 'required');

			if ($this->form_validation->run()) {
				//UPDATE TEACHERS NAME
				$params = array(
					'NAME' => $this->input->post('NAME'),
				);
				$this->Teacher_model->update_teacher($ID, $params);

				//UPDATE TEACHER PROGRAMS
				$this->Teacher_model->update_teacher_programs($ID, $this->input->post('PROGRAM_IDS'));

				if ($this->session->userdata("status") == "teacher") {
					redirect('/dashboard');
				} else {
					redirect('teacher/index');
				}
			} else {
				$this->load->model('Program_model');
				$data['all_programs'] = $this->Program_model->get_all_programs();

				$data['_view'] = 'teacher/edit';
				$this->load->view('layouts/main', $data);
			}
		} else {
			show_error('The teacher you are trying to edit does not exist.');
		}
	}

	function password($ID) {
		$pass = $this->input->post("PASS");
		$confirm = $this->input->post("CONFIRM");
		if ($pass != $confirm) {
			redirect("/teacher/edit/$ID?pass=error");
			return;
		}

		$this->Teacher_model->update_teacher($ID, array("PASSWORD_HASH" => password_hash($pass, PASSWORD_BCRYPT)));
		redirect("/teacher/edit/$ID");
	}

	/*
	 * Editing a teacher
	 */
	function noProgram() {
		// check if the teacher exists before trying to edit it
		$ID = $this->session->userdata("userid");
		$data['teacher'] = $this->Teacher_model->get_teacher($ID);
		$data['teacher_programs'] = $this->Teacher_model->get_teacher_programs($ID);

		if (isset($data['teacher']['ID'])) {
			$this->load->library('form_validation');

			$this->form_validation->set_rules('PROGRAM_IDS[]', 'PROGRAM IDS', 'required');

			if ($this->form_validation->run()) {
				$this->Teacher_model->update_teacher_programs($ID, $this->input->post('PROGRAM_IDS'));
				redirect('/dashboard');
			} else {
				$this->load->model('Program_model');
				$data['all_programs'] = $this->Program_model->get_all_programs();

				$data['_view'] = 'teacher/no-program';
				$this->load->view('layouts/main', $data);
			}
		} else {
			show_error('The teacher you are trying to edit does not exist.');
		}
	}

	/*
	 * Deleting teacher
	 */
	function remove($ID) {
		$teacher = $this->Teacher_model->get_teacher($ID);

		// check if the teacher exists before trying to delete it
		if (isset($teacher['ID'])) {
			$this->Teacher_model->delete_teacher($ID);
			redirect('teacher/index');
		} else {
			show_error('The teacher you are trying to delete does not exist.');
		}
	}

	public function list_students() {
		$programs = explode(",", $this->Teacher_model->get_program_by_teacher_id($this->session->userid));
		//die(var_dump($programs));

		$data['students'] = $this->Student_model->get_all_students_from_program_ids($programs);

		$data['teachers'] = $this->Teacher_model->get_all_teachers_from_program_ids($programs);

		$data['unassigned_students'] = $this->Student_model->get_all_unassigned_students_by_program_id($programs);
		$data['_view'] = 'teacher/list_students';
		$this->load->view('layouts/main', $data);
	}

	public function assign_student($ID) {
		$this->Student_model->assign_student_to_teacher($ID, $this->session->userid);
		redirect("/teacher/list_students");
	}

	public function unassign_student($ID) {
		$this->Student_model->unassign_student_from_teacher($ID);
		$params = array('ARCHIVE' => 0);
		$this->Student_model->update_student($ID, $params);
		redirect("/teacher/list_students");
	}

	public function archive_student($ID) {
		$this->Student_model->unassign_student_from_teacher($ID);
		$params = array('ARCHIVE' => 1);
		$this->Student_model->update_student($ID, $params);
		redirect("/teacher/list_students");
	}

	public function unarchive_student($ID) {
		$this->Student_model->unassign_student_from_teacher($ID);
		$params = array('ARCHIVE' => 0);
		$this->Student_model->update_student($ID, $params);
		redirect("/teacher/list_students");
	}

	public function mass_assign_students() {
		$students_id = $this->input->post("selected");

		if ($students_id == null) {
			echo "EMPTY";
			die();
		}

		foreach ($students_id as $id) {
			$this->Student_model->assign_student_to_teacher($id, $this->session->userid);
		}

		echo "DONE";
	}

	public function mass_archive_students() {
		$students_id = $this->input->post("selected");

		if ($students_id == null) {
			echo "EMPTY";
			die();
		}

		foreach ($students_id as $id) {
			$params = array(
				'ARCHIVE' => 1,
			);
			$this->Student_model->update_student($id, $params);
		}

		echo "DONE";
	}

	public function archive_teacher($ID) {
		$this->Teacher_model->update_teacher($ID, array("DISABLED" => 1));
		redirect("/teacher/index");
	}

	public function unarchive_teacher($ID) {
		$this->Teacher_model->update_teacher($ID, array("DISABLED" => 0));
		redirect("/teacher/index");
	}
}
