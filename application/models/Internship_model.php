<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Internship_model extends CI_Model {
	function __construct() {
		parent::__construct();
	}

	/*
	 * Get internship by ID
	 */
	function get_internship($ID) {
		$this->db->select("Inter.ID AS ID,
			Inter.EMPLOYER_CONTACT_ID AS EMPLOYER_CONTACT_ID,
			Blo.TEACHER_ID AS TEACHER_ID,
			Inter.SCHEDULE AS SCHEDULE,
			Inter.DATE_START AS DATE_START,
			Inter.DATE_END AS DATE_END,
			Inter.DESCRIPTION AS DESCRIPTION,
			Inter.STUDENT_ID AS STUDENT_ID,
			Inter.EMPLOYER_ID AS EMPLOYER_ID,
			IF(Inter.DATE_END < now(),'FINISHED',IF(Inter.DATE_START > now(),'FUTUR','CURRENT')) AS INTERNSHIP_STATUS,
			Stu.NAME AS STUDENT_NAME,
			Stu.SCHOOL AS SCHOOL,
			Emp.CONTACT_NAME AS EMPLOYER_CONTACT,
			Emp.EMPLOYER_NAME AS EMPLOYER_NAME,
			Pro.NAME AS PROGRAM_NAME,
			Pro.ID AS PROGRAM_ID,
			Emp.ID AS EMPLOYER_ID,
			Stu.ID AS STUDENT_ID");
		$this->db->from('INTERNSHIPS AS Inter');
		$this->db->join('STUDENTS AS Stu', 'Inter.STUDENT_ID = Stu.ID');
		$this->db->join('BLOCKS AS Blo', 'Inter.ID = Blo.INTERNSHIP_ID');
		//$this->db->join('TEACHERS AS Tea', 'Inter.TEACHER_ID = Tea.ID');
		$this->db->join('EMPLOYERS AS Emp', 'Inter.EMPLOYER_ID = Emp.ID');
		$this->db->join('PROGRAMS AS Pro', 'Inter.PROGRAM_ID = Pro.ID');
		$this->db->where('Inter.ID', $ID);
		$this->db->where('Blo.CURRENT', 1);
		return $this->db->get()->row_array();
	}

	/*
	 * Get all INTERNSHIPS
	 */

	function get_internship_count($USER_ROLE, $INTERNSHIP_STATUS) {
		$this->db->select("COUNT(ID)");
		$this->db->from('INTERNSHIPS AS Inter');
		$this->db->join('STUDENTS AS Stu', 'Inter.STUDENT_ID = Stu.ID');
		$this->db->join('TEACHERS AS Tea', 'Inter.TEACHER_ID = Tea.ID');
		$this->db->join('EMPLOYERS AS Emp', 'Inter.EMPLOYER_ID = Emp.ID');
		$this->db->join('PROGRAMS AS Pro', 'Inter.PROGRAM_ID = Pro.ID');

		switch ($USER_ROLE) {
			case "employer":
				$this->db->where('Emp.ID', $USER_ID);
				break;
			case "student":
				$this->db->where('Stu.ID', $USER_ID);
				break;
			case "teacher":
				$this->db->where('Tea.ID', $USER_ID);
				break;
		}
		switch ($INTERNSHIP_STATUS) {
			case "CURRENT":
				$this->db->where('Inter.DATE_START <=', 'now()', false);
				$this->db->where('Inter.DATE_END >', 'now()', false);
				break;
			case "FUTUR":
				$this->db->where('Inter.DATE_START >', 'now()', false);
				break;
			case "FINISHED":
				$this->db->where('Inter.DATE_END <', 'now()', false);
				break;
		}

		return $this->db->count_all_results();
	}

	function get_internship_count_by_teacher($TEACHER_ID, $PROGRAMS, $FLAG) {
		$this->db->select("COUNT(ID)");
		$this->db->from('INTERNSHIPS');
		$this->db->join('BLOCKS', 'INTERNSHIPS.ID = BLOCKS.INTERNSHIP_ID');

		switch ($FLAG) {
			case "SELF":
				$this->db->where('BLOCKS.TEACHER_ID', $TEACHER_ID);
				$this->db->where('BLOCKS.CURRENT', 1);
				break;
			case "PROGRAM":
				$this->db->where_in('INTERNSHIPS.PROGRAM_ID', $PROGRAMS);
				$this->db->where('BLOCKS.CURRENT', 1);
				break;
			case "TOTAL":
				$this->db->where('BLOCKS.CURRENT', 1);
				break;
		}

		return $this->db->count_all_results();
	}

	function get_internship_count_by_employer($EMPLOYER_ID, $PROGRAMS, $FLAG) {
		$this->db->select("COUNT(ID)");
		$this->db->from('INTERNSHIPS');
		$this->db->join('BLOCKS', 'INTERNSHIPS.ID = BLOCKS.INTERNSHIP_ID');

		switch ($FLAG) {
			case "SELF":
				$this->db->where('INTERNSHIPS.EMPLOYER_ID', $EMPLOYER_ID);
				$this->db->where('BLOCKS.CURRENT', 1);
				break;
			case "PROGRAM":
				$this->db->where_in('INTERNSHIPS.PROGRAM_ID', $PROGRAMS);
				$this->db->where('BLOCKS.CURRENT', 1);
				break;
			case "TOTAL":
				$this->db->where('BLOCKS.CURRENT', 1);
				break;
		}

		return $this->db->count_all_results();
	}

	function get_internship_count_by_student($STUDENT_ID, $PROGRAM) {
		$this->db->select("COUNT(ID)");
		$this->db->from('INTERNSHIPS');
		$this->db->join('BLOCKS', 'INTERNSHIPS.ID = BLOCKS.INTERNSHIP_ID');
		$this->db->where('INTERNSHIPS.PROGRAM_ID', $PROGRAM);
		$this->db->where('INTERNSHIPS.STUDENT_ID', $STUDENT_ID);
		$this->db->where('BLOCKS.CURRENT', 1);

		return $this->db->count_all_results();
	}

	function get_all_internships($USER_ROLE, $USER_ID, $PROGRAM_ID = null) {
		$year_from = $this->db->get_where('SETTINGS', array('NAME' => "year_from"))->row()->VALUE;
		$year_to = $this->db->get_where('SETTINGS', array('NAME' => "year_to"))->row()->VALUE;

		$this->db->select("
            Inter.ID AS ID,
            Inter.INACTIVE AS INACTIVE,
            Inter.DESCRIPTION AS DESCRIPTION,
            Stu.NAME AS STUDENT_NAME,
            Stu.SCHOOL AS SCHOOL,
            Tea.NAME AS TEACHER_NAME,
            Emp.EMPLOYER_NAME AS EMPLOYER_NAME,
            Pro.NAME AS PROGRAM_NAME,
            MIN(Blo.DATE_START) AS DATE_START,
            MAX(Blo.DATE_END) AS DATE_END,
            Blo.CURRENT AS CURRENT,
            if(MIN(Blo.DATE_START) <= CURDATE(),if(MAX(Blo.DATE_END) >= CURDATE(),\"NOW\",\"PAST\"),\"FUTUR\") AS INTERNSHIP_STATUS
            ");
		$this->db->from('INTERNSHIPS AS Inter');
		$this->db->join('STUDENTS AS Stu', 'Inter.STUDENT_ID = Stu.ID');
		$this->db->join('BLOCKS AS Blo', 'Inter.ID = Blo.INTERNSHIP_ID');
		$this->db->join('TEACHERS AS Tea', 'Blo.TEACHER_ID = Tea.ID');
		$this->db->join('EMPLOYERS AS Emp', 'Inter.EMPLOYER_ID = Emp.ID');
		$this->db->join('PROGRAMS AS Pro', 'Inter.PROGRAM_ID = Pro.ID');

		//CONDITION BASED ON ROLE AND ID
		switch ($USER_ROLE) {
			case "employer":
				$this->db->where('Emp.ID', $USER_ID);
				break;
			case "student":
				$this->db->where('Stu.ID', $USER_ID);
				break;
			case "teacher":

				$this->db->where_in('Inter.PROGRAM_ID', explode(",", $PROGRAM_ID));

				break;
		}
		$this->db->group_by('ID');
		$this->db->order_by('DATE_START', 'ASC');
		return $this->db->get()->result_array();
	}

	function get_letters_generator_internships($USER_ID) {
		$this->db->select("
            BLOCKS.ID AS BLOCK_ID,
            BLOCKS.NAME AS BLOCK_NAME,
            PROGRAMS.NAME AS PROGRAM_NAME,
            TEACHERS.NAME AS TEACHER_NAME,
            BLOCKS.DATE_START AS DATE_START,
            BLOCKS.DATE_END AS DATE_END,
            STUDENTS.NAME AS STUDENT_NAME
        ");
		// FROM BLOCKS
		// LEFT JOIN INTERNSHIPS ON INTERNSHIPS.ID = BLOCKS.INTERNSHIP_ID
		// LEFT JOIN PROGRAMS ON INTERNSHIPS.PROGRAM_ID = PROGRAMS.ID
		// LEFT JOIN TEACHERS ON TEACHERS.ID = BLOCKS.TEACHER_ID
		// LEFT JOIN STUDENTS ON INTERNSHIPS.STUDENT_ID = STUDENTS.ID
		// WHERE BLOCKS.TEACHER_ID = ".$USER_ID

		$this->db->from("TEACHER_PROGRAMS");
		$this->db->join("INTERNSHIPS", "INTERNSHIPS.PROGRAM_ID = TEACHER_PROGRAMS.PROGRAM_ID");
		$this->db->join("BLOCKS", "BLOCKS.INTERNSHIP_ID = INTERNSHIPS.ID");
		$this->db->join("PROGRAMS", "INTERNSHIPS.PROGRAM_ID = PROGRAMS.ID");
		$this->db->join("TEACHERS", "TEACHERS.ID = BLOCKS.TEACHER_ID");
		$this->db->join("STUDENTS", "INTERNSHIPS.STUDENT_ID = STUDENTS.ID");

		$this->db->where("TEACHER_PROGRAMS.TEACHER_ID", $USER_ID);
		$this->db->where("INTERNSHIPS.INACTIVE", 0);

		$this->db->order_by('INTERNSHIPS.ID', 'asc');
		$this->db->order_by('BLOCKS.DATE_START', 'asc');

		return $this->db->get()->result_array();
	}

	/*
	 * function to add new internship
	 */
	function add_internship($params) {
		$this->db->insert('INTERNSHIPS', $params);
		return $this->db->insert_id();
	}

	/*
	 * function to update internship
	 */
	function update_internship($ID, $params) {
		$this->db->where('ID', $ID);
		return $this->db->update('INTERNSHIPS', $params);
	}

	/*
	 * function to delete internship
	 */
	function delete_internship($ID) {
		return $this->db->delete('INTERNSHIPS', array('ID' => $ID));
	}

	function get_all_internships_by_program_id($ID) {
		return $this->db->get_where('INTERNSHIPS', array('PROGRAM_ID' => $ID))->result_array();
	}

	function get_actors_from_internship($ID) {
		$this->db->select("STUDENT_ID, EMPLOYER_ID");
		$result = $this->db->get_where('INTERNSHIPS', array('ID' => $ID))->row_array();

		$data = array(
			"STUDENT" => $result['STUDENT_ID'],
			//"TEACHER"   => $result['TEACHER_ID'],
			"EMPLOYER" => $result['EMPLOYER_ID'],
		);

		return $data;
	}

	function get_all_internships_custom() {
		$this->db->order_by('ID', 'desc');
		return $this->db->get('INTERNSHIPS')->result_array();
	}

    function get_interships_for_report($students, $employers, $programs, $date_debut, $date_fin, $cities = null, $cats = null) {
        $query = "select
			INTERNSHIPS.ID as INTERNSHIP_ID,
            STUDENTS.NAME as STUDENT_NAME,
            STUDENTS.SCHOOL,
            EMPLOYERS.EMPLOYER_NAME,
            EMPLOYERS.CITY as EMPLOYER_CITY,
            EMPLOYERS.ADDRESS as EMPLOYER_ADDRESS,
            EMPLOYERS.POSTAL_CODE as EMPLOYER_POSTAL_CODE,
			EMPLOYERS_CAT.NAME as EMPLOYER_CATEGORY,
            EMPLOYER_CONTACTS.CONTACT_NAME,
            EMPLOYER_CONTACTS.CONTACT_PHONE,
            EMPLOYER_CONTACTS.CONTACT_EMAIL,
            PROGRAMS.NAME as PROGRAM,
            INTERNSHIPS.DATE_START,
            INTERNSHIPS.DATE_END
        from INTERNSHIPS
        left join STUDENTS on INTERNSHIPS.STUDENT_ID = STUDENTS.ID
        left join EMPLOYERS on INTERNSHIPS.EMPLOYER_ID = EMPLOYERS.ID
        left join EMPLOYER_CONTACTS on INTERNSHIPS.EMPLOYER_CONTACT_ID = EMPLOYER_CONTACTS.ID
		left join EMPLOYERS_CAT_PROGRAMS on EMPLOYERS_CAT_PROGRAMS.EMPLOYER_ID = EMPLOYERS.ID
        left join EMPLOYERS_CAT on EMPLOYERS_CAT.ID = EMPLOYERS_CAT_PROGRAMS.CATEGORY_ID
        left join PROGRAMS on INTERNSHIPS.PROGRAM_ID = PROGRAMS.ID
        where STUDENTS.NAME is not null and INTERNSHIPS.INACTIVE = 0";

        if (!in_array(0, $students))
            $query .= "\nand STUDENTS.ID in (" . implode(",", $students) . ")";

        if (!in_array(0, $employers))
            $query .= "\nand EMPLOYERS.ID in (" . implode(",", $employers) . ")";

        if (!in_array(0, $programs))
            $query .= "\nand PROGRAMS.ID in (" . implode(",", $programs) . ")";

        if ($date_debut != null && $date_fin != null)
            $query .= "\nand DATE(DATE_START) between '{$date_debut}' and '{$date_fin}'";

		if ($cities != null && is_array($cities) && count($cities) > 0) {
			$list = $this->Employer_model->list_cities();
			if (!in_array(-1, $cities)) {
				$first = true;
				$query .= "\nand (";
				foreach ($cities as $c) {
					if ($first) {
						$first = false;
						$query .= " EMPLOYERS.CITY like '%{$list[$c]["CITY"]}%'";
					} else {
						$query .= " or EMPLOYERS.CITY like '%{$list[$c]["CITY"]}%'";
					}
				}
				$query .= ")";
			}
		}

	    if ($cats != null && is_array($cats) && count($cats) > 0 && !in_array(0, $cats))
		    $query .= "\nand EMPLOYERS_CAT.ID in (" . implode(",", $cats) . ")";

        return array($this->db->query($query)->result_array(), $this->db->last_query());
    }
}
