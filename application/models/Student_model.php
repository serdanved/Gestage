<?php /*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Student_model extends CI_Model {
	function __construct() {
		parent::__construct();
	}

	/*
	 * Get student by ID
	 */
	function get_student($ID) {
		return $this->db->get_where('STUDENTS', array('ID' => $ID))->row_array();
	}

	function get_student_by_email($EMAIL) {
		return $this->db->get_where('STUDENTS', array('EMAIL_CS' => $EMAIL))->row_array();
	}

	/*
	 * Get all students
	 */
	function get_all_students() {
		$this->db->select('S.ID, S.GUID, S.NAME, S.EMAIL_CS, S.SCHOOL, P.NAME AS PROGRAM_NAME');
		$this->db->from('STUDENTS AS S');
		$this->db->join('PROGRAMS AS P', 'S.PROGRAM_ID = P.ID', 'left');
		$this->db->where('ARCHIVE', 0);
		$this->db->order_by('S.NAME', 'ASC');
		return $this->db->get()->result_array();
	}

	function get_all_archived_students() {
		$this->db->select('S.ID, S.GUID, S.NAME, S.EMAIL_CS, S.SCHOOL, P.NAME AS PROGRAM_NAME');
		$this->db->from('STUDENTS AS S');
		$this->db->join('PROGRAMS AS P', 'S.PROGRAM_ID = P.ID', 'left');
		$this->db->where('ARCHIVE', 1);
		$this->db->order_by('S.NAME', 'ASC');
		return $this->db->get()->result_array();
	}

	function check_student($EMAIL) {
		$this->db->select('1');
		$this->db->from('STUDENTS AS Stu');
		$this->db->where('Stu.EMAIL_CS', $EMAIL);
		return $this->db->count_all_results();
	}

	/*
	 * function to add new student
	 */
	function add_student($params) {
		$this->db->insert('STUDENTS', $params);
		return $this->db->insert_id();
	}

	/*
	 * function to update student
	 */
	function update_student($ID, $params) {
		$this->db->where('ID', $ID);
		return $this->db->update('STUDENTS', $params);
	}

	/*
	 * function to delete student
	 */
	function delete_student($ID) {
		return $this->db->delete('STUDENTS', array('ID' => $ID));
	}

	function get_student_id_by_email($email) {
		$this->db->select('ID,PROGRAM_ID');
		$this->db->where('EMAIL_CS', $email);
		return $this->db->get('STUDENTS')->row();
	}

	function get_student_name_by_internship_id($id) {
		$this->db->select('STUDENTS.NAME');

		$this->db->from('INTERNSHIPS');
		$this->db->join('STUDENTS', 'STUDENTS.ID = INTERNSHIPS.STUDENT_ID');
		$this->db->where('INTERNSHIPS.ID', $id);
		return $this->db->get()->row_array();
	}

	function get_student_id_by_internship_id($id) {
		$this->db->select('STUDENTS.ID');

		$this->db->from('INTERNSHIPS');
		$this->db->join('STUDENTS', 'STUDENTS.ID = INTERNSHIPS.STUDENT_ID');
		$this->db->where('INTERNSHIPS.ID', $id);
		return $this->db->get()->row_array();
	}

	function get_student_name_by_id($ID) {
		return $this->db->get_where('STUDENTS', array('ID' => $ID))->row_array();
	}

	function get_all_students_by_teacher_id($ID) {
		$this->db->order_by('STUDENTS.NAME', 'ASC');
		return $this->db->get_where('STUDENTS', array('TEACHER_ID' => $ID))->result_array();
	}

	function get_all_student_by_teacher_id($TEACHER_ID, $PROGRAMS, $FLAG) {
		$this->db->select("COUNT(ID)");
		$this->db->from('STUDENTS');

		switch ($FLAG) {
			case "SELF":
				$this->db->where('STUDENTS.TEACHER_ID', $TEACHER_ID);
				break;
			case "PROGRAM":
				$this->db->where_in('STUDENTS.PROGRAM_ID', $PROGRAMS);
				break;
			case "TOTAL":
				break;
		}
		return $this->db->count_all_results();
	}

	function get_all_student_by_employer_id($TEACHER_ID, $PROGRAMS, $FLAG) {
		$this->db->select("COUNT(ID)");
		$this->db->from('STUDENTS');

		switch ($FLAG) {
			case "SELF":
				$this->db->where('STUDENTS.TEACHER_ID', $TEACHER_ID);
				break;
			case "PROGRAM":
				$this->db->where_in('STUDENTS.PROGRAM_ID', $PROGRAMS);
				break;
			case "TOTAL":
				break;
		}
		return $this->db->count_all_results();
	}

	function get_all_students_from_program_ids($IDS) {
		$this->db->where_in('STUDENTS.PROGRAM_ID', $IDS);
		$this->db->order_by('STUDENTS.NAME', 'ASC');
		return $this->db->get('STUDENTS')->result_array();
	}

	function get_all_unassigned_students_by_program_id($IDS) {
		$this->db->select("
            ID,
            GUID,
            NAME,
            SUBSTRING_INDEX(NAME, ' ', 1) as FIRST_NAME,
            SUBSTRING_INDEX(NAME, ' ', -1) as LAST_NAME,
            EMAIL_CS,
            SCHOOL,
            PROGRAM_ID,
            TEACHER_ID,
            GROUP_ID,
            ARCHIVE
        ");
		$this->db->from('STUDENTS');
		$this->db->where_in('STUDENTS.TEACHER_ID', 0);
		$this->db->where_in('STUDENTS.PROGRAM_ID', array_merge([0], $IDS));
		// $this->db->order_by('STUDENTS.NAME','ASC');
		$this->db->order_by("FIRST_NAME", "ASC");
		// echo "<pre>";
		// var_dump($this->db->get()->result_array());
		// echo "</pre>";
		return $this->db->get()->result_array();
	}

	function assign_student_to_teacher($student_id, $teacher_id) {
		$params = array(
			'TEACHER_ID' => $teacher_id,
		);

		$this->db->where('ID', $student_id);
		$this->db->update('STUDENTS', $params);
	}

	function unassign_student_from_teacher($student_id) {
		$params = array(
			'TEACHER_ID' => 0,
		);

		$this->db->where('ID', $student_id);
		$this->db->update('STUDENTS', $params);
	}

	function get_assigned_teacher($ID) {
		$results = $this->db->get_where('STUDENTS', array('ID' => $ID))->row();

		if ($results->TEACHER_ID == 0) {
			return false;
		} else {
			return true;
		}
	}
}
