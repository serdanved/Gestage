<?php
/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Document_model extends CI_Model {
    function __construct() {
        parent::__construct();
    }

    /*
     * Get document by ID
     */
    function get_document($ID) {
        return $this->db->get_where('DOCUMENTS', array('ID' => $ID))->row_array();
    }

    /*
     * Get document ID BY USER AND INTERNSHIP
     */
    function get_document_id($USER_ID, $STATUS_ID, $INTERNSHIP_ID, $FILENAME) {
        $this->db->select('ID');
        $this->db->where('UPLOADER_USERID', $USER_ID);
        $this->db->where('UPLOADER_TYPEID', $STATUS_ID);
        $this->db->where('INTERNSHIP_ID', $INTERNSHIP_ID);
        $this->db->where('FILENAME', $FILENAME);
        return $this->db->get('DOCUMENTS')->row()->ID;
    }

    /*
     * Get all documents
     */
    function get_all_documents() {
        $this->db->order_by('ID', 'desc');
        return $this->db->get('DOCUMENTS')->result_array();
    }

    function get_all_documents_where($params) {
        $this->db->order_by('ID', 'desc');
        return $this->db->get_where('DOCUMENTS',$params)->result_array();
    }

    function get_all_documents_by_internship($INTERNSHIP_ID) {
        $this->db->order_by('ID', 'asc');
        return $this->db->get_where('DOCUMENTS', array('INTERNSHIP_ID' => $INTERNSHIP_ID))->result_array();
    }

    /*
     * function to add new document
     */
    function add_document($params) {
        $this->db->insert('DOCUMENTS', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update document
     */
    function update_document($ID, $params) {
        $this->db->where('ID',$ID);
        return $this->db->update('DOCUMENTS',$params);
    }

    /*
     * function to delete document
     */
    function delete_document($ID) {
        return $this->db->delete('DOCUMENTS', array('ID' => $ID));
    }

    function get_uploader_data($ID, $TYPE) {
        $table = "";

        switch($TYPE) {
            case 1:
                $table = "STUDENTS";
                break;
            case 2:
                $table = "TEACHERS";
                break;
            case 3:
                $table = "EMPLOYERS";
                break;
        }

        return $this->db->get_where($table, array('ID' => $ID))->row();
    }

    function get_protocoles_for_report($date_debut, $date_end) {
        $query = "SELECT
                documents.ID,
                documents.NAME,
                documents.DATE,
                employers.EMPLOYER_NAME,
                students.NAME as STUDENT_NAME
            FROM documents
            left join internships on internships.ID = documents.INTERNSHIP_ID
            left join blocks on blocks.ID = documents.BLOCK_ID
            left join employers on employers.ID = internships.EMPLOYER_ID
            left join students on students.ID = internships.STUDENT_ID
            where documents.NAME like 'PROTOCOLE -%' and internships.INACTIVE = 0";

        if ($date_debut != null && $date_end != null)
            $query .= "\nand DATE(documents.DATE) between '{$date_debut}' and '{$date_end}'";

        $query .= "\norder by documents.DATE";
        return array($this->db->query($query)->result_array(), $this->db->last_query());
    }
}
