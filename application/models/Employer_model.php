<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Employer_model extends CI_Model {
	function __construct() {
		parent::__construct();
	}

	/*
	 * Get employer by ID
	 */
	function get_employer_category_from_program($employer, $program) {
		$query = "SELECT * FROM EMPLOYERS_CAT_PROGRAMS WHERE PROGRAM_ID = $program AND EMPLOYER_ID = $employer";
		$result = $this->db->query($query)->row_array();
		if ($result != null && $result["ID"]) {
			return $this->get_category($result["CATEGORY_ID"]);
		}
	}

	function get_employer_categories($employer) {
		return $this->db->get_where("EMPLOYERS_CAT_PROGRAMS", ["EMPLOYER_ID" => $employer])->result_array();
	}

	function update_category($ID, $params) {
		$this->db->where('ID', $ID);
		return $this->db->update('EMPLOYERS_CAT', $params);
	}

	function get_category($ID) {
		return $this->db->get_where('EMPLOYERS_CAT', array('ID' => $ID))->row_array();
	}

	function add_category($params) {
		$this->db->insert('EMPLOYERS_CAT', $params);
		return $this->db->insert_id();
	}

	function get_all_categories() {
		return $this->db->get("EMPLOYERS_CAT")->result_array();
	}

	function get_categories($ID) {
		return $this->db->get_where('EMPLOYERS_CAT', array('PROGRAM_ID' => $ID))->result_array();
	}

	function get_employer($ID) {
		return $this->db->get_where('EMPLOYERS', array('ID' => $ID))->row_array();
	}

	//DELETE ALL PROGRAMS AND INSERT THE NEWS
	function update_employer_programs($EMPLOYER_ID, $PROGRAM_IDS) {
		if (isset($EMPLOYER_ID) && isset($PROGRAM_IDS)) {
			//DELETE OLD PROGRAMS IN TEACHER_PROGRAMS

			foreach ($PROGRAM_IDS as $prog) {
				if ($prog == 'none') {
					$this->db->delete('EMPLOYER_PROGRAMS', array('EMPLOYER_ID' => $EMPLOYER_ID));
					return;
				}
			}

			$this->db->delete('EMPLOYER_PROGRAMS', array('EMPLOYER_ID' => $EMPLOYER_ID));

			//INSERT NEW PROGRAMS
			foreach ($PROGRAM_IDS as $program_id) {
				$params = array(
					'EMPLOYER_ID' => $EMPLOYER_ID,
					'PROGRAM_ID' => $program_id,
				);

				$this->db->insert('EMPLOYER_PROGRAMS', $params);
			}
		}
	}

	function get_employer_programs($ID) {
		$this->db->select('Pro.ID AS ID, Pro.NAME AS NAME');
		$this->db->from('EMPLOYER_PROGRAMS AS Emp_Pro');
		$this->db->join('EMPLOYERS AS Emp', 'Emp.ID = Emp_Pro.EMPLOYER_ID');
		$this->db->join('PROGRAMS AS Pro', 'Pro.ID = Emp_Pro.PROGRAM_ID');
		$this->db->where('Emp_Pro.EMPLOYER_ID', $ID);

		return $this->db->get()->result_array();
	}

	function get_all_employers_with_programs() {
		$this->db->select('Emp.ID, Emp.EMPLOYER_NAME, Emp.CONTACT_NAME, Emp.EMAIL, GROUP_CONCAT(Pro.NAME SEPARATOR "<br>") AS PROGRAM_NAMES');
		$this->db->from('EMPLOYER_PROGRAMS AS Emp_Pro');
		$this->db->join('EMPLOYERS AS Emp', 'Emp.ID = Emp_Pro.EMPLOYER_ID');
		$this->db->join('PROGRAMS AS Pro', 'Pro.ID = Emp_Pro.PROGRAM_ID');
		$this->db->group_by('Emp.ID');
		return $this->db->get()->result_array();
	}

	function get_all_employers_without_programs() {
		$this->db->select('Emp.ID, Emp.EMPLOYER_NAME, Emp.CONTACT_NAME, Emp.EMAIL');
		$this->db->from('EMPLOYERS AS Emp');
		$this->db->join('EMPLOYER_PROGRAMS AS Emp_Pro', 'Emp.ID = Emp_Pro.EMPLOYER_ID', 'left');
		$this->db->where('Emp_Pro.EMPLOYER_ID', null);
		return $this->db->get()->result_array();
	}

	//GET EMPLOYER ID BY PHONE NUMBER
	function get_employer_id($phone_number) {
		$this->db->select("ID");
		return $this->db->get_where('EMPLOYERS', array('PHONEHASH' => $phone_number))->row()->ID;
	}

	/*
	 * Get all employers
	 */
	function get_all_employers() {
		$this->db->select("PRO.ID AS PROGRAM_ID, EMP.ID,EMP.VISIBLE,EMP.USERNAME,EMP.EMPLOYER_NAME,EMP.CONTACT_NAME,EMP.PHONE,EMP.COUNTRY,EMP.PROVINCE,EMP.CITY,EMP.ADDRESS,EMP.POSTAL_CODE,EMP.EMAIL,EMP.NEQ,EMP.INACTIVE");
		$this->db->from("EMPLOYERS AS EMP");
		$this->db->join('EMPLOYER_PROGRAMS AS EMP_PRO', 'EMP_PRO.EMPLOYER_ID = EMP.ID', "left");
		$this->db->join('PROGRAMS AS PRO', 'EMP_PRO.PROGRAM_ID = PRO.ID', "left");
		$this->db->order_by('EMPLOYER_NAME', 'asc');
		return $this->db->get()->result_array();
	}

	function get_employers_simple_list() {
		return $this->db->get("EMPLOYERS")->result_array();
	}

	function get_program_by_employer_id($ID) {
		$this->db->select('group_concat(EMPLOYER_PROGRAMS.PROGRAM_ID) AS PROGRAM_IDS');
		return $this->db->get_where('EMPLOYER_PROGRAMS', array('EMPLOYER_ID' => $ID))->row()->PROGRAM_IDS;
	}

	function get_count_program_by_employer_id($ID) {
		$this->db->select('EMPLOYER_PROGRAMS.PROGRAM_ID AS PROGRAM_IDS');
		$this->db->get_where('EMPLOYER_PROGRAMS', array('EMPLOYER_ID' => $ID))->result_array();
		return $this->db->count_all_results();
	}

	//RETURN NUMBER OF INTERNSHIPS FOR AN EMPLOYER ID
	function get_employer_internship_count($employer_id) {
		$this->db->select("COUNT(Inter.ID)");
		$this->db->from('INTERNSHIPS AS Inter');
		$this->db->join('EMPLOYERS AS Emp', 'Inter.EMPLOYER_ID = Emp.ID');
		$this->db->where('Emp.ID', $employer_id);
		return $this->db->count_all_results();
	}

	function get_program_employers($ID) {
		$this->db->select('Emp.ID AS ID, Emp.EMPLOYER_NAME AS NAME');
		$this->db->from('EMPLOYER_PROGRAMS AS Emp_Pro');
		$this->db->join('EMPLOYERS AS Emp', 'Emp.ID = Emp_Pro.EMPLOYER_ID');
		$this->db->join('PROGRAMS AS Pro', 'Pro.ID = Emp_Pro.PROGRAM_ID');
		$this->db->where('Emp_Pro.PROGRAM_ID', $ID);
		$this->db->order_by('Emp.EMPLOYER_NAME', 'asc');

		return $this->db->get()->result_array();
	}

	/*
	 * function to add new employer
	 */
	function add_employer($params) {
		$this->db->insert('EMPLOYERS', $params);
		return $this->db->insert_id();
	}

	function add_employer_program($params) {
		$this->db->insert('EMPLOYER_PROGRAMS', $params);
		return $this->db->insert_id();
	}

	/*
	 * function to update employer
	 */
	function update_employer($ID, $params) {
		$this->db->where('ID', $ID);
		return $this->db->update('EMPLOYERS', $params);
	}

	/*
	 * function to delete employer
	 */
	function delete_employer($ID) {
		return $this->db->delete('EMPLOYERS', array('ID' => $ID));
	}

	function delete_employer_contact($ID) {
		return $this->db->delete('EMPLOYER_CONTACTS', array('ID' => $ID));
	}

	function get_employer_name_by_id($ID) {
		return $this->db->get_where('EMPLOYERS', array('ID' => $ID))->row_array();
	}

	function get_all_employer_contacts($ID) {
		$this->db->order_by('CONTACT_NAME', 'asc');
		return $this->db->get_where('EMPLOYER_CONTACTS', array('EMPLOYER_ID' => $ID))->result_array();
	}

	function add_employer_contact($params) {
		$this->db->insert('EMPLOYER_CONTACTS', $params);
		return $this->db->insert_id();
	}

	function update_employer_contact($id, $params) {
		return $this->db->where("ID", $id)->update("EMPLOYER_CONTACTS", $params);
	}

	function get_employer_contact($ID) {
		return $this->db->get_where('EMPLOYER_CONTACTS', array('ID' => $ID))->row_array();
	}

    function get_employers_for_report($programs, $loadContacts) {
        $this->db->select("EMPLOYERS.ID, EMPLOYER_NAME, COUNTRY, PROVINCE, CITY, ADDRESS, POSTAL_CODE, CONTACT_NAME, EMAIL, NOTE, NOTE_2")
            ->join("EMPLOYER_PROGRAMS", "EMPLOYER_PROGRAMS.EMPLOYER_ID = EMPLOYERS.ID", "left")
            ->join("PROGRAMS", "PROGRAMS.ID = EMPLOYER_PROGRAMS.PROGRAM_ID", "left")
            ->where("INACTIVE", 0);

        if (!in_array(0, $programs))
            $this->db->where_in("PROGRAMS.ID", $programs);

        $employers = $this->db->order_by("EMPLOYER_NAME")
            //->limit(200)
            ->get("EMPLOYERS")
            ->result_array();

        if ($loadContacts == true) {
            foreach ($employers as &$e) {
                $e["CONTACTS"] = $this->db->select("ID, CONTACT_NAME, CONTACT_PHONE, CONTACT_EMAIL")
                    ->where("EMPLOYER_ID", $e["ID"])
                    ->get("EMPLOYER_CONTACTS")
                    ->result_array();
            }
        }

        return $employers;
    }

	function list_cities() {
		return $this->db->query("select distinct TRIM(CITY) as CITY from EMPLOYERS where CITY <> '' order by TRIM(CITY)")->result_array();
	}
}
