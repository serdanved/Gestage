<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Teacher_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('program_model');
    }

    /*
     * Get teacher by ID
     */
    function get_teacher($ID)
    {
        $this->db->select('Tea.*, GROUP_CONCAT(Pro.NAME SEPARATOR "<br>") AS PROGRAM_NAMES,GROUP_CONCAT(Pro.ID) AS PROGRAM_IDS');
        $this->db->from('TEACHERS AS Tea');
        $this->db->join('TEACHER_PROGRAMS AS Tea_Pro', 'Tea.ID = Tea_Pro.TEACHER_ID','left');
        $this->db->join('PROGRAMS AS Pro', 'Pro.ID = Tea_Pro.PROGRAM_ID','left');
        $this->db->where('Tea.ID',$ID);
        $this->db->group_by('Tea.ID');
        return $this->db->get()->row_array();
    }

    function check_teacher($EMAIL){
        $this->db->select('1');
        $this->db->from('TEACHERS AS Tea');
        $this->db->where('Tea.EMAIL_CS',$EMAIL);
        return $this->db->count_all_results();
    }

    function get_teacher_by_email($email) {
        return $this->db->get_where("TEACHERS", array("EMAIL_CS" => $email))->row_array();
    }

    function get_teachers_select($ID)
    {
        return $this->db->get_where('TEACHERS',array('ID'=>$ID))->result_array();
    }

    /*
     * Get all teachers
     */
    function get_all_teachers()
    {
        $this->db->select("TEACHERS.*,SUBSTR( NAME, INSTR( NAME,  ' ' ) ) AS FAMILYNAME, LEFT(NAME,LOCATE(' ',NAME) - 1) AS PRENOM");
        $this->db->order_by('PRENOM', 'ASC')->where("DISABLED", 0);
        return $this->db->get('TEACHERS')->result_array();
    }

    /*
     * function to add new teacher
     */
    function add_teacher($params)
    {
        $this->db->insert('TEACHERS',$params);
        return $this->db->insert_id();
    }

    /*
     * function to update teacher
     */
    function update_teacher($ID,$params)
    {
        $this->db->where('ID',$ID);
        return $this->db->update('TEACHERS',$params);
    }

    /*
     * function to delete teacher
     */
    function delete_teacher($ID)
    {
        return $this->db->delete('TEACHERS',array('ID'=>$ID));
    }

    function remove_program($PROGRAM_ID,$TEACHER_ID){
         return $this->db->delete('TEACHER_PROGRAMS',array('PROGRAM_ID'=>$PROGRAM_ID,'TEACHER_ID'=>$TEACHER_ID));
    }

    function get_teacher_programs($ID)
    {
        $this->db->select('Pro.ID AS ID, Pro.NAME AS NAME');
        $this->db->from('TEACHER_PROGRAMS AS Tea_Pro');
        $this->db->join('TEACHERS AS Tea', 'Tea.ID = Tea_Pro.TEACHER_ID');
        $this->db->join('PROGRAMS AS Pro', 'Pro.ID = Tea_Pro.PROGRAM_ID');
        $this->db->where('Tea_Pro.TEACHER_ID', $ID);
        return $this->db->get()->result_array();
    }

    function get_teacher_programs_not($IDS)
    {
        array_push($IDS, 0);
        $this->db->select(' DISTINCT(Pro.ID) AS ID, Pro.NAME AS NAME');
        $this->db->from('TEACHER_PROGRAMS AS Tea_Pro');
        $this->db->join('TEACHERS AS Tea', 'Tea.ID = Tea_Pro.TEACHER_ID');
        $this->db->join('PROGRAMS AS Pro', 'Pro.ID = Tea_Pro.PROGRAM_ID');
        $this->db->where_not_in('Pro.ID', $IDS);
        $this->db->order_by(' Pro.NAME', 'ASC');

        return $this->db->get()->result_array();
    }

    function get_program_teachers($ID)
    {
        $this->db->select('Tea.*');
        $this->db->from('TEACHER_PROGRAMS AS Tea_Pro');
        $this->db->join('TEACHERS AS Tea', 'Tea.ID = Tea_Pro.TEACHER_ID');
        $this->db->join('PROGRAMS AS Pro', 'Pro.ID = Tea_Pro.PROGRAM_ID');
        $this->db->where('Tea_Pro.PROGRAM_ID', $ID)->where("Tea.DISABLED", 0);
        $this->db->order_by('Tea.Name', 'ASC');

        return $this->db->get()->result_array();
    }

    function get_program_by_teacher_id($ID)
    {
        $this->db->select('group_concat(TEACHER_PROGRAMS.PROGRAM_ID) AS PROGRAM_IDS');
        return $this->db->get_where('TEACHER_PROGRAMS', array('TEACHER_ID' => $ID))->row()->PROGRAM_IDS;
    }

    function get_program_by_teacher_id_select($ID)
    {
        $this->db->select('Pro.ID AS ID, Pro.NAME AS NAME');
        $this->db->from('TEACHERS AS Tea');
        $this->db->join('TEACHER_PROGRAMS AS Tea_Pro', 'Tea.ID = Tea_Pro.TEACHER_ID','left');
        $this->db->join('PROGRAMS AS Pro', 'Tea_Pro.PROGRAM_ID = Pro.ID');
        $this->db->where('Tea.ID', $ID);
        return $this->db->get()->result_array();
    }

    function get_teacher_id_by_email($email)
    {
        $this->db->select('ID');
        $this->db->where('EMAIL_CS', $email);
        return $this->db->get('TEACHERS')->row();
    }

    function get_teacher_name_by_id($ID)
    {
        return $this->db->get_where('TEACHERS', array('ID' => $ID))->row_array();
    }

    function get_all_teachers_from_program_ids($IDS)
    {
        $this->db->select('Tea.ID, Tea.GUID, Tea.NAME, Tea.EMAIL_CS, GROUP_CONCAT(Pro.NAME SEPARATOR "<br>") AS PROGRAM_NAMES,GROUP_CONCAT(Pro.ID) AS PROGRAM_IDS');
        $this->db->from('TEACHER_PROGRAMS AS Tea_Pro');
        $this->db->join('TEACHERS AS Tea', 'Tea.ID = Tea_Pro.TEACHER_ID');
        $this->db->join('PROGRAMS AS Pro', 'Pro.ID = Tea_Pro.PROGRAM_ID');
        $this->db->where_in('Tea_Pro.PROGRAM_ID', $IDS)->where("Tea.DISABLED", 0);
        $this->db->group_by('Tea.ID');
        $this->db->order_by('Tea.EMAIL_CS', 'ASC');
        return $this->db->get()->result_array();
    }

    function get_all_active_teachers() {
        $query = "SELECT Tea.ID, Tea.NAME, Tea.EMAIL_CS,
            (
                SELECT GROUP_CONCAT(Pro.NAME SEPARATOR \"<br>\")
                FROM TEACHER_PROGRAMS AS Tea_Pro
                LEFT JOIN PROGRAMS AS Pro ON Pro.ID = Tea_Pro.PROGRAM_ID
                WHERE Tea_Pro.TEACHER_ID = Tea.ID
                GROUP BY Tea_Pro.TEACHER_ID
            ) AS PROGRAM_NAMES
        FROM TEACHERS AS Tea
        WHERE Tea.DISABLED = 0";
        return $this->db->query($query)->result_array();
    }

    function get_all_teachers_with_programs()
    {
        $this->db->select('Tea.ID, Tea.GUID, Tea.NAME, Tea.EMAIL_CS, GROUP_CONCAT(Pro.NAME SEPARATOR "<br>") AS PROGRAM_NAMES');
        $this->db->from('TEACHER_PROGRAMS AS Tea_Pro');
        $this->db->join('TEACHERS AS Tea', 'Tea.ID = Tea_Pro.TEACHER_ID');
        $this->db->join('PROGRAMS AS Pro', 'Pro.ID = Tea_Pro.PROGRAM_ID');
        $this->db->group_by('Tea.ID')->where("Tea.DISABLED", 0);
        return $this->db->get()->result_array();
    }

    function get_all_teachers_without_programs()
    {
        $this->db->select('Tea.ID, Tea.GUID, Tea.NAME, Tea.EMAIL_CS');
        $this->db->from('TEACHERS AS Tea');
        $this->db->join('TEACHER_PROGRAMS AS Tea_Pro', 'Tea.ID = Tea_Pro.TEACHER_ID', 'left');
        $this->db->where('Tea_Pro.TEACHER_ID', NULL)->where("Tea.DISABLED", 0);
        return $this->db->get()->result_array();
    }

    function get_all_inactive_teachers() {
        $this->db->select('Tea.ID, Tea.GUID, Tea.NAME, Tea.EMAIL_CS');
        $this->db->from('TEACHERS AS Tea');
        $this->db->where("Tea.DISABLED", 1);
        return $this->db->get()->result_array();
    }

    //DELETE ALL PROGRAMS AND INSERT THE NEWS
    function update_teacher_programs($TEACHER_ID, $PROGRAM_IDS)
    {
        if(isset($TEACHER_ID) && isset($PROGRAM_IDS))
        {
            //DELETE OLD PROGRAMS IN TEACHER_PROGRAMS
            foreach($PROGRAM_IDS as $prog) {
                if ($prog == 'none') {
                    $this->db->delete('TEACHER_PROGRAMS',array('TEACHER_ID' => $TEACHER_ID));
                    return;
                }
            }

            $this->db->delete('TEACHER_PROGRAMS',array('TEACHER_ID' => $TEACHER_ID));

            //INSERT NEW PROGRAMS
            foreach ($PROGRAM_IDS as $program_id)
            {
                $params = array(
					'TEACHER_ID'    => $TEACHER_ID,
					'PROGRAM_ID'    => $program_id,
                );
                $this->db->insert('TEACHER_PROGRAMS',$params);
            }
        }
    }

    function add_program($params){
        $this->db->insert('TEACHER_PROGRAMS',$params);
    }

    function get_all_programs_from_teacher($teacher_id)
    {
        return $this->db->get_where("TEACHER_PROGRAMS", array('TEACHER_ID' => $teacher_id))->result_array();
    }
}
